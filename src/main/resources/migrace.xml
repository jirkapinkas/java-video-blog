<migrace>
<group>
<description>
<![CDATA[
Tutorial how to log effectively in Java using Log4j, SLF4J and Eclipse IDE. 
]]>
</description>
<name>
<![CDATA[
Java logging tutorial
]]>
</name>
<date>2012-03-03T13:45:52</date>
<shortdesc>Video tutorial how to log effectively in Java using Log4j, SLF4J and Eclipse IDE. </shortdesc>
<shortname>logging</shortname>
<order>3</order>
</group>

<group>
<description>
<![CDATA[
How to test Java applications using JUnit and Eclipse IDE
]]>
</description>
<name>
<![CDATA[
JUnit tutorial
]]>
</name>
<date>2012-03-12T13:01:29</date>
<shortdesc>How to test Java applications using JUnit and Eclipse IDE. Test driven development (TDD) in practice.</shortdesc>
<shortname>junit</shortname>
<order>4</order>
</group>

<group>
<description>
<![CDATA[
What is Apache Tomcat, how to use it and integrate with Eclipse
]]>
</description>
<name>
<![CDATA[
Apache Tomcat
]]>
</name>
<date>2013-01-21T07:43:58</date>
<shortdesc>What is Apache Tomcat, how to use it and integrate with Eclipse</shortdesc>
<shortname>apache-tomcat</shortname>
<order>8</order>
</group>

<group>
<description>
<![CDATA[
Tutorial how to effectively use Eclipse IDE for programming Java applications
]]>
</description>
<name>
<![CDATA[
Eclipse basics tutorial
]]>
</name>
<date>2011-11-20T10:10:35</date>
<shortdesc>Video tutorial how to effectively use Eclipse IDE for programming Java applications.</shortdesc>
<shortname>eclipse</shortname>
<order>2</order>
</group>

<group>
<description>
<![CDATA[
How to use Apache Maven to easily manage dependencies and build your applications.
]]>
</description>
<name>
<![CDATA[
Apache Maven
]]>
</name>
<date>2013-07-04T13:03:01</date>
<shortdesc>How to use Apache Maven to easily manage dependencies and build your applications.</shortdesc>
<shortname>apache-maven</shortname>
<order>9</order>
</group>

<group>
<description>
<![CDATA[
Accessing database in Java using JDBC - Java DataBase Connectivity and JPA - Java Persistence API (Hibernate, Eclipselink, Toplink). Presented on MySQL database.
]]>
</description>
<name>
<![CDATA[
Java & database access
]]>
</name>
<date>2012-05-01T14:29:36</date>
<shortdesc>Accessing database in Java using JDBC - Java DataBase Connectivity and JPA - Java Persistence API (Hibernate, Eclipselink, Toplink)</shortdesc>
<shortname>java-database</shortname>
<order>7</order>
</group>

<group>
<description>
<![CDATA[
Java basics tutorial for beginners. From installation of JDK to programming console applications in Eclipse IDE.
]]>
</description>
<name>
<![CDATA[
Java basics tutorial
]]>
</name>
<date>2011-11-14T16:15:52</date>
<shortdesc>Java basics tutorial for beginners. From installation of JDK to programming console applications in Eclipse IDE.</shortdesc>
<shortname>java-basics</shortname>
<order>1</order>
</group>

<group>
<description>
<![CDATA[
How to open a stream, save data to a file and read data from a file in Java.
]]>
</description>
<name>
<![CDATA[
How to work with files in Java tutorial
]]>
</name>
<date>2012-03-29T05:50:46</date>
<shortdesc>How to open a stream, save data to a file and read data from a file in Java.</shortdesc>
<shortname>java-files</shortname>
<order>5</order>
</group>

<group>
<description>
<![CDATA[
How to effectively use XML binding in Java using JAXB and Eclipse. How to use DOM or SAX. How to read and save data to XML file in Java.
]]>
</description>
<name>
<![CDATA[
Java & XML tutorial
]]>
</name>
<date>2012-04-29T12:12:33</date>
<shortdesc>XML binding in Java using JAXB. Using DOM and SAX. Reading and saving data to XML file in Java.</shortdesc>
<shortname>java-xml</shortname>
<order>6</order>
</group>

<group>
<description>
<![CDATA[
Miscellaneous Java videos
]]>
</description>
<name>
<![CDATA[
Java Misc
]]>
</name>
<date>2012-06-23T15:23:08</date>
<shortdesc>Miscellaneous Java videos</shortdesc>
<shortname>java-misc</shortname>
<order>100</order>
</group>

<group>
<description>
<![CDATA[
How to create a web application (Java Blogs Aggregator) from scratch. From nothing to an application up and running on a custom domain.
]]>
</description>
<name>
<![CDATA[
Spring web application tutorial (java blogs aggregator)
]]>
</name>
<date>2014-04-01T13:20:09</date>
<shortdesc>How to create a web application (Java Blogs Aggregator) from scratch. From nothing to an application up and running on a custom domain.</shortdesc>
<shortname>spring-web-application-tutorial-java-blogs-aggregator</shortname>
<order>10</order>
</group>

<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>If you want to download Eclipse, you must choose between version for Java Developers and Java EE Developers. <br /><br />Eclipse for Java Developers has plugins for creating GUI with Swing, but it lacks other useful plugins such as plugins for working with database. These plugins are installed in Eclipse for Java EE Developers. <br /><br />It would be nice to have them all together. In order to do that you must download and unzip Eclipse for Java Developers and install plugin named web tools platform. <br /><br />First google web tools platform update site. Next find URL of a update repository. It begins with http://download.eclipse.org/webtools/repository/ and ends with name of your Eclipse. At the time of creating this screencast current Eclipse version is Indigo. So this URL will end with indigo. <br /><br />Next in your Eclipse select Help -&gt; Install new software -&gt; type URL of the repository, press enter and install WTP plugin. After successful installation your Eclipse will have both plugins for Java Developers and Java EE Developers.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse IDE for Java Developers and Java EE Developers together
]]>
</name>
<youtubeid>2VaADHp-Rfo</youtubeid>
<shortdesc>
<![CDATA[
Eclipse IDE for Java Developers and Java EE Developers together using WTP (Web Tools Platform) update site.
]]>
</shortdesc>
<shortname>eclipse-ide-for-java-developers-and-java-ee-developers-together</shortname>
<publishdate>2012-02-17T10:51:32</publishdate>
<length>214</length>
<keywords>eclipse
java
tutorial
howto
video
WTP
Web Tools Platform
update site
plugin</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">Currently, there are four Java IDEs. IDE means Integrated Development Environment and is supposed to be all-in-one suite for development of applications. Technically you can develop Java applications in Notepad, but only madman would do that.</p>
<p style="margin-bottom: 0cm;">Least used is Oracle JDeveloper, which is aimed solely at integration with Oracle database server. Otherwise it's rubbish.</p>
<p style="margin-bottom: 0cm;">Another is IntelliJ IDEA, which is the only IDE for Java, that isn't free. You can try community edition, which is free.</p>
<p style="margin-bottom: 0cm;">Next is NetBeans, which is official IDE from Oracle. Whenever Oracle releases new Java feature, NetBeans is first to have support for it.</p>
<p style="margin-bottom: 0cm;">Most used is Eclipse. Every popular IDE has modular structure, so that 3<sup>rd</sup> party companies can create plugins that extend functionality, something like Firefox browser. Eclipse has most plugins. It's best IDE for you if you use open source frameworks like Spring.</p>
<p style="margin-bottom: 0cm;">If you want to download Eclipse, you have to choose from several packages. Every package ƒçconsists of base Eclipse IDE and essential plugins for different kind of programmers, such as Java SE developers, Java EE developers and so on. Choose one package, download it, simply unzip it and run eclipse.exe.</p>
]]>
</description>
<name>
<![CDATA[
What Java IDE (Integrated Development Environment) to use?
]]>
</name>
<youtubeid>jkhyPcrZJfw</youtubeid>
<shortdesc>
<![CDATA[
What Java IDE (Integrated Development Environment) to use? Plus installation of Eclipse.
]]>
</shortdesc>
<shortname>what-java-ide-integrated-development-environment-to-use</shortname>
<publishdate>2011-10-03T10:13:52</publishdate>
<length>117</length>
<keywords>eclipse
java
tutorial
howto
video</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">If you have JDK and Eclipse IDE, you can create a first aka hello world application.</p>
<p style="margin-bottom: 0cm;">First, you have to start Eclipse. During startup Eclipse will ask you for location of workspace directory. In this directory it will save all necessary configuration files and projects. I will use this workspace directory.</p>
<p>After startup right click New Java project. Type name of the project: hello world and click finish</p>
<p>Here we can see directory with Java sources. Everything is empty. Your application must do something, otherwise all of this would be pointless.</p>
<p style="margin-bottom: 0cm;">Code that does something is located in methods, that are in classes.</p>
<p>So first we must create a new class. Right click new class. Type name of your class: Application. Type name of package app and click to generate main method.</p>
<p>This method is a point, where your application starts. Click Finish Here instead of this todo write your code. To write something to standard output write system out println hello world.</p>
<p style="margin-bottom: 0cm;">And now you can start your first application.</p>
]]>
</description>
<name>
<![CDATA[
Java hello world program in Eclipse
]]>
</name>
<youtubeid>dZAtSslBrKE</youtubeid>
<shortdesc>
<![CDATA[
Java and Eclipse hello world application.
]]>
</shortdesc>
<shortname>java-hello-world-program-in-eclipse</shortname>
<publishdate>2011-10-04T10:13:18</publishdate>
<length>219</length>
<keywords>eclipse
java
tutorial
howto
video
Hello World</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">Right now your project is bunch of java files in Eclipse. But usually when you finish your application, you want to create a runnable file, so that somebody else can execute it. How to do that?</p>
<p style="margin-bottom: 0cm;">First you must test run your application in Eclipse. This will create a run configuration, which we<span lang="en-US">'ll </span><span lang="cs-CZ">use later. </span></p>
<p style="margin-bottom: 0cm;" lang="en-US">I have here two applications. One is a console application and the other is a gui application.</p>
<p style="margin-bottom: 0cm;" lang="cs-CZ">To create a runnable file, <span lang="en-US">you must right click your project and choose export. Choose Runnable Jar file and click next. There you must choose your launch configuration, which is the same as run configuration created earlier.</span></p>
<p style="margin-bottom: 0cm;" lang="en-US">Type export destination jar file.</p>
<p style="margin-bottom: 0cm;" lang="en-US">And choose what to do with libraries, that your application use. I usually choose to copy libraries into a subfolder. Click finish.</p>
<p style="margin-bottom: 0cm;" lang="en-US">Now we'll go to the output folder. Here you can run your application in two ways. If your application is a gui application, you can click on jar file and it will run. If it's a console application, you must open command line and type java minus jar and jar filename.</p>
<p style="margin-bottom: 0cm;" lang="en-US">By the way, what is jar file anyway? It's an ordinary zip archive, where are packages with class files and META-INF directory with manifest mf file. In this file is mainly defined application classpath and a default main class to execute if you want to run this application.</p>
]]>
</description>
<name>
<![CDATA[
How to create an executable jar file in eclipse
]]>
</name>
<youtubeid>VGf8iiNBUjY</youtubeid>
<shortdesc>
<![CDATA[
How to create an executable jar file in eclipse, running jar file and structure of jar file.
]]>
</shortdesc>
<shortname>how-to-create-an-executable-jar-file-in-eclipse</shortname>
<publishdate>2011-11-15T19:08:27</publishdate>
<length>267</length>
<keywords>eclipse
java
tutorial
howto
video
package
jar</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Often, Eclipse IDE needs access to the Internet, for example to install updates and plugins. If your computer is behind a proxy server, which is in most companies, you must configure proxy settings in Eclipse.<br /><br />Select Window -&gt; Preferences, Choose Network Connections, Select Active Provider Manual, Select HTTP in the list and click Edit button. Fill in proxy server host and port number, you can also fill in username and password if required. And now you are done.</p>
]]>
</description>
<name>
<![CDATA[
How to configure proxy settings in Eclipse
]]>
</name>
<youtubeid>4-XC5583bBA</youtubeid>
<shortdesc>
<![CDATA[
How to configure proxy settings in Eclipse if you are behind a proxy server.
]]>
</shortdesc>
<shortname>how-to-configure-proxy-settings-in-eclipse</shortname>
<publishdate>2012-06-15T12:31:44</publishdate>
<length>93</length>
<keywords>java
eclipse
howto
tutorial
proxy
proxy setting
properties
settings</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">Imagine you have an application with lots of classes. It's quite common. Even very small projects have dozens of classes. In medium sized projects are hundrets of classes and in big projects are thousands of classes at minimum.</p>
<p style="margin-bottom: 0cm;">And don't forget about libraries that every project use. They have classes as well.</p>
<p style="margin-bottom: 0cm;">What are classes?  They are files with the same name and with suffix java. They are all in project sources directory.</p>
<p style="margin-bottom: 0cm;">How to divide classes so that they all wouldn't be in one place? Using packages. What are packages? When classes are files, than packages must be ... that's right ‚Äì directories. Like directories have sub-directories, packages have sub-packages.</p>
<p style="margin-bottom: 0cm;">There's also a convention, that packages are in form of reversed URL pattern. They typically start with com or org, next is project name, subproject name and so on.</p>
<p style="margin-bottom: 0cm;">Now you see, that this structure is much better, than having all classes in one package.</p>
<p style="margin-bottom: 0cm;">By the way, can you have Java class, that isn't in any package? Yes, you can. When class isn't in any package, it's also called, that such class is in default package. And you should never ever do that. Every class should be in some package.</p>
<p style="margin-bottom: 0cm;">And this information is also in every class. See package declaration, which is in every Java class, that is in some package.</p>
]]>
</description>
<name>
<![CDATA[
Java packages tutorial part 1
]]>
</name>
<youtubeid>uBh2fWznAho</youtubeid>
<shortdesc>
<![CDATA[
Java packages explained, how to structure Java package and info about default package.
]]>
</shortdesc>
<shortname>java-packages-tutorial-part-1</shortname>
<publishdate>2011-11-13T10:13:02</publishdate>
<length>225</length>
<keywords>eclipse
java
tutorial
howto
video
Java package
Java default package
Package</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">During programming any decent programmer documents what he or she writes. Java programmers use for this task Javadoc. In code it looks like multiple-line comment, but between the two is a significant difference.</p>
<p style="margin-bottom: 0cm;">Multiple-line comment starts with slash followed by single asterisk. Javadoc starts with slash followed by two asterisks.</p>
<p style="margin-bottom: 0cm;">You type Javadoc before the structure you want to comment. It can be a class, attribute or method. Method is especially interesting. On method you can comment not only what it does, but also its input and output.</p>
<p style="margin-bottom: 0cm;">For creation of Javadoc use Eclipse like this:</p>
<p style="margin-bottom: 0cm;">type slash, two asterisks and press enter. It will generate a structure, where you just fill in your documentation.</p>
<p style="margin-bottom: 0cm;">When you comment using Javadoc, you can use this documentation in two ways. You can access it in your IDE during development. Or you can generate HTML documentation. Select your project, click Project, Generate Javadoc and don't forget to set path to javadoc.exe command in your JDK.</p>
<p style="margin-bottom: 0cm;">In this HTML documentation you have screen divided into three parts: packages, classes and the detail of selected class.</p>
<p style="margin-bottom: 0cm;">Creators of Java also used Javadoc for documentation. Just google Java api 7 and you will easily find documentation for Java 7.</p>
]]>
</description>
<name>
<![CDATA[
How to write, generate and use Javadoc in Eclipse
]]>
</name>
<youtubeid>Hx-8BD_Osdw</youtubeid>
<shortdesc>
<![CDATA[
How to write, generate and use Javadoc in Eclipse.
]]>
</shortdesc>
<shortname>how-to-write-generate-and-use-javadoc-in-eclipse</shortname>
<publishdate>2011-11-16T16:17:54</publishdate>
<length>221</length>
<keywords>eclipse
java
tutorial
howto
video
Javadoc</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>Now we'll use Apache Commons Lang library in the project. Java is multiplatform, but some things are by nature different in each platform. For example running an external command. In Windows one uses command cmd, but in Linux one uses bash.</p>
<p>In Apache Commons Lang library is a class SystemUtils with static field IS_OS_WINDOWS, which returns true, if you run this application on Windows and false otherwise.</p>
<p>In order to use the library in the project, you must add the library to Build Path. You can do that in several ways. I will show you the one most flexible. First we will create a user library in Eclipse and next we will associate this library with a project.</p>
<p>To create a user library click Window -&gt; Preferences. Select Java -&gt; Build Path -&gt; User Libraries and create a new user library named apache-commons and add JAR commons-lang. Also attach source and javadoc.</p>
<p>Now we have to put this library to build path of a project, where we want to use it. Right click Project name -&gt; Build Path -&gt; Add Libraries and choose User Library, apache-commons.</p>
<p>Now you can use classes from this library. You can also see, that we have fully working Javadoc documentation and if you hold CONTROL key and click on some class or method, you can jump to source.</p>
]]>
</description>
<name>
<![CDATA[
Java library system tutorial part 2
]]>
</name>
<youtubeid>FKgihXCjvEs</youtubeid>
<shortdesc>
<![CDATA[
Java library tutorial part 2 presented on Apache Commons Lang library.
]]>
</shortdesc>
<shortname>java-library-system-tutorial-part-2</shortname>
<publishdate>2011-11-18T16:41:34</publishdate>
<length>235</length>
<keywords>eclipse
java
tutorial
howto
video
Apache Commons
library
jar</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>What is a class? It's something like a blueprint, or a template from which objects are created. Whereas an object is an instance, that has been created from the class.</p>
<p>Let's see an example. In this example the class has a name Person, which has attributes name and height. On the other hand, there are three objects aka instances of this Person class. These objects are: Michael with height 180cm, Josh with height 170cm and Amanda with height 170cm.</p>
<p>Let's create this example in Eclipse.</p>
<p>First we have to create a new Java project. Let's call it Persons. Next we will create a class Person in package persons. This person will have two attributes: name and height. Set them public visibility. It is easier for now. In next video I'll explain visibility modifiers and change the visibility of these attributes. We'll also create a method with name print, which will print name and height of a person.</p>
<p>Next we'll create a Main class with main method. In this method we'll create three persons, Michael with height 180 cm, Josh with 170 cm and Amanda with 170 cm. On each person we'll call method print, which will print their attributes to console.</p>
]]>
</description>
<name>
<![CDATA[
How to create a Java class in Eclipse
]]>
</name>
<youtubeid>HWH9qT-ZZCE</youtubeid>
<shortdesc>
<![CDATA[
creating a Java class in Eclipse and difference between class and object.
]]>
</shortdesc>
<shortname>how-to-create-a-java-class-in-eclipse</shortname>
<publishdate>2011-11-19T11:20:26</publishdate>
<length>295</length>
<keywords>eclipse
java
tutorial
howto
video
class
object</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>In each appender you must set layout. Usually you will use PatternLayout, where you define a pattern of a log message, but there are also other layouts, such as HTMLLayout.<br /><br />You can even print logging information to more than one appender at once.<br /><br />Another cool feature is, that you can customize logging level for different packages. If you use external frameworks in your application such as Spring or Hibernate, if you turn on DEBUG logging level for whole application, you will get significant amount of logging information from these frameworks. Usually you don't need that much information. Instead set root logger level for example to WARN and set your own package to another logging level using log4j.category, for example DEBUG.<br /><br />log4j.category.your_package=DEBUG</p>
]]>
</description>
<name>
<![CDATA[
log4j.properties explained part 2
]]>
</name>
<youtubeid>S6U6bzU1jng</youtubeid>
<shortdesc>
<![CDATA[
log4j.properties explained - appenders, layouts - Pattern and HTML layout, package logging level.
]]>
</shortdesc>
<shortname>log4jproperties-explained-part-2</shortname>
<publishdate>2012-03-04T10:06:40</publishdate>
<length>269</length>
<keywords>java
log4j
eclipse
logging
logger
appender
layout
pattern
logging level
package
tutorial
howto
video</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">JRE is a shortname for Java Runtime Edition. In short it's a bunch of applications and Java libraries that are required to run Java applications. This is what you need to run a Java application.</p>
<p style="margin-bottom: 0cm;">You can download it on java.com, which is a site for people, that aren't programmers (aka normal people).</p>
<p style="margin-bottom: 0cm;">But in order to create a Java application, you need more. You need JDK, which is a shortname for Java Development Kit. You can download it on oracle.com website. Just google jdk and you should be able to find it.</p>
<p style="margin-bottom: 0cm;">JDK contains JRE, so you don't have to download it separatelly. Don't bother about these links, instead scroll lower. Here you will find a link to JDK.</p>
<p style="margin-bottom: 0cm;">After successful installation you can find JDK in Program Files slash Java folder.</p>
<p style="margin-bottom: 0cm;">As you can see, there's much more in JDK than in JRE alone.</p>
]]>
</description>
<name>
<![CDATA[
Difference between Java JRE and JDK
]]>
</name>
<youtubeid>Hyk3BtCZOEY</youtubeid>
<shortdesc>
<![CDATA[
Difference between Java JRE and JDK plus how to install JDK (Java Development Kit).
]]>
</shortdesc>
<shortname>difference-between-java-jre-and-jdk</shortname>
<publishdate>2011-10-01T13:05:55</publishdate>
<length>108</length>
<keywords>eclipse
java
tutorial
howto
video
JDK
JRE</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to cascade operations in JPA / Hibernate? Presented on cascade type remove. This will solve ConstraintViolationException, which we'll get, when we try to remove some entity without removing all entities, which use it, first.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 31: JPA / Hibernate cascade
]]>
</name>
<youtubeid>_1b1mdA7r3Y</youtubeid>
<shortdesc>
<![CDATA[
How to cascade operations in JPA / Hibernate? Presented on cascade type remove. This will solve ConstraintViolationException.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-31-jpa-hibernate-cascade</shortname>
<publishdate>2014-04-23T18:33:04</publishdate>
<length>577</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
cascade
java blog aggregator
aggregator
hibernate
jpa
Java Persistence API (Software)
framework spring
spring framework
cascade type
remove
delete</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">So far when I created a class, method or an attribute, let's call them all together elements, I used public visibility. What does it mean? It means, that such element is visible from any other class in the whole application. You may think that it's a good thing, but not always. Generally some elements are local and should not be visible to everyone. For example attributes. It is really a bad thing to have publicly visible attributes. Why? Because you have absolutely no control over changing or getting their value.</p>
<p style="margin-bottom: 0cm;">In order to regain this control they can't be publicly visible. If they are not meant to be public, then they must be ... private. Private visibility is the opposite of public visibility. Private attribute is visible only in a class, where it's defined.</p>
<p style="margin-bottom: 0cm;">But usually you have to be able to access some elements from another classes. In order to get or set a value of an attribute, you must create a getter and setter, standardized methods, that have public visibility and can be used to get or set a value of an attribute.</p>
<p style="margin-bottom: 0cm;">You can easily create them using CONTROL + Space in Eclipse. In the next video, I'll show you how generate getters and setters in Eclipse more effectively.</p>
<p style="margin-bottom: 0cm;">But back to visibility modifiers. There are two other modifiers. If you omit visibility modifier, you set package visibility. Such element is accessible only from classes, that are in the same package.</p>
<p style="margin-bottom: 0cm;">And the last visibility modifier is protected, which is something between package and public visibility. Element with modifier protected is accessible from all classes, that are in the same package and from any subclass. Subclasses are part of class inheritance, which I'll present later.</p>
]]>
</description>
<name>
<![CDATA[
Java public private package visibility modifiers
]]>
</name>
<youtubeid>wTw8E-PvxCU</youtubeid>
<shortdesc>
<![CDATA[
Java public private package visibility modifiers. Basic encapsulation in Java.
]]>
</shortdesc>
<shortname>java-public-private-package-visibility-modifiers</shortname>
<publishdate>2011-11-19T15:47:08</publishdate>
<length>301</length>
<keywords>eclipse
java
tutorial
howto
video
visibility
private
public
protected
modifier</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>Let's implement this test. In this test I must have an instance of a tested class, which is TransformationService. Because we can (and will) have more tests, it is very useful to declare it as an attribute.<br /><br />Next we must decide where we will create an instance of this attribute. For this I must say something more about workflow of a test case and test. As you can see, one unit test is a method, annotated with @Test. There are several other annotations. They are all optional and if you don't use them, you can delete them and associated methods. Method annotated with @BeforeClass will be executed before any tests and only once for all tests in one test case. Next will be executed tests in following order. Before every test will be executed method annotated with @Before. Next will be executed method annotated with @Test and after that will be executed method with @After. This sequence will be applied to all tests. After all tests, will be executed method annotated with @AfterClass.<br /><br />Each unit test should be designed in isolation, that means that is should not depend on other unit tests. So creation of an instance of a class under test is usually done in method annotated with @Before annotation.<br /><br />Now we can implement a test. We supply some input data, call the tested method and compare results with expected results. We can use for that several supplied assert methods. These methods are static methods from class org.junit.Assert, which was imported using "import static" keyword during creation of a test case using Eclipse.<br /><br />Now I have successfully tested method transformData(). In case of a failure, there would be displayed error message. At any time you can easily re-run test.</p>
]]>
</description>
<name>
<![CDATA[
JUnit tutorial, how to create a test in Eclipse IDE part 2
]]>
</name>
<youtubeid>oCNMinACgAk</youtubeid>
<shortdesc>
<![CDATA[
JUnit tutorial, how to create a test in Eclipse, lifecycle of a JUnit test case, usage of method assertEquals.
]]>
</shortdesc>
<shortname>junit-tutorial-how-to-create-a-test-in-eclipse-ide-part-2</shortname>
<publishdate>2012-03-12T15:11:16</publishdate>
<length>295</length>
<keywords>java
JUnit
testing
unit testing
eclipse
tutorial
howto
test case
JUnit framework
assertequals
video</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>Both these commands are in JRE and are almost identical, except that with javaw.exe there is no associated console window.<br /><br />This means that when you want to run a console application, you must use java.exe. If you want to run an application with user interface, you can use java.exe, but then the application has associated a console, so if you close it, the application closes as well. If you run your GUI application with javaw.exe, this application is not associated with any console, so you don't have to worry about this.</p>
]]>
</description>
<name>
<![CDATA[
Difference between java.exe and javaw.exe
]]>
</name>
<youtubeid>AQUAyJYwJ6Q</youtubeid>
<shortdesc>
<![CDATA[
Difference between java.exe and javaw.exe and when to use them.
]]>
</shortdesc>
<shortname>difference-between-javaexe-and-javawexe</shortname>
<publishdate>2012-06-20T15:46:15</publishdate>
<length>125</length>
<keywords>java
javaw
java.exe
javaw.exe
video
tutorial
howto
console
gui
application</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create a dynamic modal dialog using Twitter Bootstrap, which will be used in a list. I will use JQuery to dynamically set link value inside modal window.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 32: Twitter Bootstrap dynamic modal
]]>
</name>
<youtubeid>hEsknpgaPmE</youtubeid>
<shortdesc>
<![CDATA[
How to create a dynamic modal dialog using Twitter Bootstrap, which will be used in a list. I will use JQuery to dynamically set link value inside modal window.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-32-twitter-bootstrap-dynamic-modal</shortname>
<publishdate>2014-04-23T18:36:31</publishdate>
<length>387</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Twitter Bootstrap (Software)
web application
java blog aggregator
aggregator
spring framework
framework spring
modal
dialog
jquery
JavaScript (Programming Language)</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">You can  use CONTROL + Space and choose appropriate getters and setters. Or even  better if I use this method, I type get and then press CONTROL + Space  and Eclipse will offer me to generate getters. Or I type set followed by  CONTROL + Space and Eclipse will offer me to generate setters.</p>
<p style="margin-bottom: 0cm;">This is  fine for adhoc generation of few getters and setters, but if your class  has many attributes,this approach would be inefficient.</p>
<p style="margin-bottom: 0cm;">You can  generate all getters and setters in one place. Click on Source -&gt;  Generate Getters and Setters and in this dialog you can choose what to  generate. I usually select all and make sure that these checkboxes are  selected: that generated methods will be final and that Eclipse will  generate comments for them. Click OK.</p>
<p style="margin-bottom: 0cm;">Unfortunately  this operation is by default not accessible using keyboard shortcut,  but you can easily fix that. Click Window -&gt; Preferences and choose  General -&gt; Keys. Find command ‚ÄûGenerate getters and setters‚Äú and type  a shortcut, that will activate this operation. I usually use CONTROL +  SHIFT + G. And now if I press CONTROL + SHIFT + G, Eclipse will open  this dialog.</p>
]]>
</description>
<name>
<![CDATA[
How to create Java getters and setters in Eclipse
]]>
</name>
<youtubeid>2IRjWH-P5pI</youtubeid>
<shortdesc>
<![CDATA[
How to effectively create Java getters and setters in Eclipse. Easily generate getters and setters.
]]>
</shortdesc>
<shortname>how-to-create-java-getters-and-setters-in-eclipse</shortname>
<publishdate>2011-11-19T19:11:35</publishdate>
<length>185</length>
<keywords>eclipse
java
tutorial
howto
video
getter
setter
visibility
private
public
protected
modifier</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">Setting JAVA_HOME and Java path is very easy. First you must locate your JDK, which is usually on C drive, Program Files, Java, JDK.</p>
<p style="margin-bottom: 0cm;">Next copy this path</p>
<p style="margin-bottom: 0cm;">Right click your computer, properties. Choose Advanced system settings. Click on environment variables and here you should have system variables.</p>
<p style="margin-bottom: 0cm;">First we'll set JAVA_HOME. It's a variable, that should point to JDK home directory. This variable is needed for many Java applications.</p>
<p style="margin-bottom: 0cm;">Click new, type variable name JAVA_HOME and paste into variable value location to JDK.</p>
<p style="margin-bottom: 0cm;">Next we'll add java executable files to path</p>
<p style="margin-bottom: 0cm;">Copy path to bin directory in JDK, click on the Path system variable. Now this is very important: type semicolon and paste path to bin directory of JDK.</p>
<p style="margin-bottom: 0cm;">Now you must restart your computer.</p>
<p style="margin-bottom: 0cm;"><strong>EDIT: You don't have to restart your computer, but any command line you have currently open.</strong></p>
]]>
</description>
<name>
<![CDATA[
How to set java environment variables on Windows
]]>
</name>
<youtubeid>yrRmLOcB9fg</youtubeid>
<shortdesc>
<![CDATA[
How to set java environment variables JAVA_HOME and path on Windows 7 / Vista.
]]>
</shortdesc>
<shortname>how-to-set-java-environment-variables-on-windows</shortname>
<publishdate>2011-10-02T08:49:07</publishdate>
<length>177</length>
<keywords>eclipse
java
tutorial
howto
video
jdk
java_home
Java Development Kit
path</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm;">One thing is to structure your project into packages and the other is to use classes from them.</p>
<p style="margin-bottom: 0cm;">When you put some class into package, you limit visibility of that class. Such class is now visible only in the same package.</p>
<p style="margin-bottom: 0cm;">If you want to use that class from another package, you must do one of two things:</p>
<p style="margin-bottom: 0cm;">You can use full name of class, which consists of all packages, in which class resides and name of the class,</p>
<p style="margin-bottom: 0cm;">Or you can import that class. Then you can access it without specifiing packages.</p>
<p style="margin-bottom: 0cm;">In Eclipse use Control Space to easily generate import.</p>
<p style="margin-bottom: 0cm;">Now I'll create a method, that will return a list of customer purchase orders.</p>
]]>
</description>
<name>
<![CDATA[
Java packages tutorial part 2
]]>
</name>
<youtubeid>4VHq_Uh9Jl4</youtubeid>
<shortdesc>
<![CDATA[
Java packages 101 part 2, full name of class and import declaration.
]]>
</shortdesc>
<shortname>java-packages-tutorial-part-2</shortname>
<publishdate>2011-11-14T10:12:41</publishdate>
<length>164</length>
<keywords>eclipse
java
tutorial
howto
video
Java package
package
class full name
Java Class File
java import</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>First you must download Eclipselink libraries. I already done that and unzipped them. Next create your own User library in Eclipse and put inside ecipselink.jar and this javax.persitence_2 jar in directory jpa. Also create library with your JDBC driver. It is unnecessary in this step, but we'll need it later. You must also have active database connection.<br /><br />Next create a new JPA project, choose your JRE, EclipseLink version you downloaded, add library with EclipseLink and select your database connection. This created file persistence.xml in META-INF directory. <br /><br />Notice that you won't see connection properties inside this file. By default JPA depends on JTA. We don't have that right now, so choose Connection tab, change Transaction type to "Resource Local" and set connection properties using alredy defined connection to database in Eclipse.<br /><br />I will also add JDBC library to classpath.<br /><br />And finally now you are ready to work with JPA.</p>
]]>
</description>
<name>
<![CDATA[
How to create JPA project with EclipseLink
]]>
</name>
<youtubeid>OzZcW7XgiPA</youtubeid>
<shortdesc>
<![CDATA[
How to create a JPA project in Eclipse with EclipseLink library, which is JPA 2.0 implementation. Presented on MySQL database.
]]>
</shortdesc>
<shortname>how-to-create-jpa-project-with-eclipselink</shortname>
<publishdate>2012-05-02T10:39:59</publishdate>
<length>298</length>
<keywords>java
eclipse
installation
install
plugin
howto
tutorial
jpa
java persistence api
mysql
jdbc
eclipselink
eclipselink tutorial
jpa 2.0
jpa 2.0 tutorial
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use JSP Include Directive to load JSP taglibs using single line of code.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 14: JSP Include Directive
]]>
</name>
<youtubeid>u6yCBH1gipg</youtubeid>
<shortdesc>
<![CDATA[
How to use JSP Include Directive to load JSP taglibs using single line of code.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-14-jsp-include-directive</shortname>
<publishdate>2014-04-23T16:29:38</publishdate>
<length>98</length>
<keywords>howto
training
javaserver pages
java
aggregator
javavids
web application
java blog aggregator
jsp
basics
taglib
tutorial
Include Directive
eclipse</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>First let's test if Java works. Goto http://java.com and click on this link "Do I have Java?" and Verify Java version. If you see something like this, then you have Java plugin enabled.</p>
<p>How to disable it?</p>
<p>Goto Tools -&gt; Manage Add-ons -&gt; Toolbars and Extensions, select to show all add-ons and you will see addons from Oracle America, Inc. You may see more or less of these plugins. Disable Java(tm) Plug-In SSV Helper and if you are unsure if you must disable other plugins, choose "More information" and if you see somewhere Java or JRE, disable it.</p>
<p>Now go back into java.com and see if Java works and now you should see that no working Java was detected, so you successfully disabled it.</p>
]]>
</description>
<name>
<![CDATA[
How to disable Java in Internet Explorer
]]>
</name>
<youtubeid>a1B3LYNu4ms</youtubeid>
<shortdesc>
<![CDATA[
How to disable Java plugin in Internet Explorer.
]]>
</shortdesc>
<shortname>how-to-disable-java-in-internet-explorer</shortname>
<publishdate>2013-01-13T10:26:32</publishdate>
<length>117</length>
<keywords>java
tutorial
howto
disable java plugin
internet explorer
disable</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>Nowadays nobody programs any application from scratch. In my opinion, almost everything one needs has been done before, you just have to find it and use it.¬†By "it" I mean classes, which are typically distributed in form of JAR files. Any JAR file can be used in two ways. As an executable Java application or as a library.</p>
<p>Where can you find these libraries? Just google it. But there's one site, that will appear in your search results very often. Apache. If you go to Apache homepage and scroll lower, you will find many Apache projects. One of them is Apache http server, but many of the others are Java libraries. Most of them are web frameworks, but one of the projects is interesting for Java SE programmer. Project commons.</p>
<p>In this Apache project are many small subprojects such as project lang. It is a project, that provides useful extensions to basic Java classes. Here is Javadoc and there you can see many classes. For example SystemUtils. There you can find many fields and some methods, which are useful if you want to know if client runs on Windows or Linux, which Java version etc.</p>
<p>Every library from each vendor on the internet is specific, but here are some common things to search for: jar files, quick start guide and javadoc. Many open source vendors such as Apache also provide source.</p>
<p>In next part we'll use this library in Eclipse.</p>
]]>
</description>
<name>
<![CDATA[
Java library system tutorial part 1
]]>
</name>
<youtubeid>CJJ0Y9tL6G0</youtubeid>
<shortdesc>
<![CDATA[
Java library tutorial part 1 presented on Apache Commons Lang library.
]]>
</shortdesc>
<shortname>java-library-system-tutorial-part-1</shortname>
<publishdate>2011-11-18T10:00:48</publishdate>
<length>228</length>
<keywords>eclipse
java
tutorial
howto
video
Apache Commons
library
jar</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Sometimes it is necessary to integrate Eclipse with JDK. For instance when some Eclipse plugin requires it, or if you want to easily see Java sources or if you want to have access to Javadoc even if you are offline.<br /><br />For sources and Javadoc is important, that when you download and install JDK, you will also have Java sources on your hard drive.<br /><br />Now we must just add JDK to Eclipse and make sure that a project has in Java Build Path selected this JDK.</p>
]]>
</description>
<name>
<![CDATA[
Java JDK Eclipse integration, see Java sources and offline Javadoc
]]>
</name>
<youtubeid>QKLPjgUxPvg</youtubeid>
<shortdesc>
<![CDATA[
Java JDK integration in Eclipse. How to see Java sources in Eclipse and Javadoc even if you are offline.
]]>
</shortdesc>
<shortname>java-jdk-eclipse-integration-see-java-sources-and-offline-javadoc</shortname>
<publishdate>2012-02-10T15:45:14</publishdate>
<length>206</length>
<keywords>eclipse
java
tutorial
howto
video
offline Javadoc
Java source
JDK
JRE</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>What is a constructor? It's a special method, which is called during creation of an object. <br /><br />Constructor looks like a method, except that name of a constructor is the same as the name of a class where it's defined and it has no return type. <br /><br />You can easily generate constructors using Source -&gt; Generate constructor.<br /><br />You can have more constructors in one class and they can call themselves using keyword this. <br /><br />If you don't provide your constructor, compiler will create a default constructor, which has no arguments and performs no special initialization. But if you do provide your explicit constructor, compiler won't create a default constructor.<br /><br />With inheritance constructors get more interesting. You cannot inherit a constructor. And by default every constructor calls default constructor from superclass. But if you define an explicit constructor in your superclass, default constructor won't be generated, so you must call your explicit constructor on your own using super keyword.</p>
]]>
</description>
<name>
<![CDATA[
Constructors in Java, how to generate a constructor in Eclipse
]]>
</name>
<youtubeid>LMDz2CMY8Bc</youtubeid>
<shortdesc>
<![CDATA[
Constructors in Java - default constructor, constructor in superclass and subclass, how to generate a constructor in Eclipse.
]]>
</shortdesc>
<shortname>constructors-in-java-how-to-generate-a-constructor-in-eclipse</shortname>
<publishdate>2012-02-10T15:06:03</publishdate>
<length>302</length>
<keywords>eclipse
java
tutorial
howto
video
constructor</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>Different database systems handle date and time in a different way. For example MySQL database has types DATE, DATETIME and TIMESTAMP. Oracle database has type DATE, which includes date and time and next it has type TIMESTAMP. On the other hand in Java you usually use instance of java.util.Date or java.sql.Timestamp.<br /><br />With Timestamp it's very easy. If you have in your database column with type TIMESTAMP, create in your entity an attribute with type java.sql.Timestamp and you have successfully mapped this column.<br /><br />But if you have in your database something else, like DATE, TIME or DATETIME, you can map this type to java.util.Date. It can be even something else like java.sql.Date or java.util.Calendar, but most people use java.util.Date. <br /><br />But java.util.Date contains both date and time! So you must somehow specify what is really in your database, be it DATE, TIME or both. <br /><br />I added to my sample database to table CUSTOMERS a column REGISTRATION_DATE, which is of type DATE. Now I want to show value of this column in my sample web application. Currently I show just name and image of each customer. I also want to show value of column REGISTRATION_DATE.<br /><br />First I must add to my entity an attribute registrationDate, which is of type java.util.Date. To map it to database, I must use annotation @Temporal. Inside this annotation I must specify what is really in my database: DATE, TIME or both - TIMESTAMP. Now I will simply print the value of this attribute in a JSP file.</p>
]]>
</description>
<name>
<![CDATA[
Mapping DATE and TIME in JPA (Hibernate) entity
]]>
</name>
<youtubeid>SztP9EB14zE</youtubeid>
<shortdesc>
<![CDATA[
Mapping DATE and TIME from database to java.util.Date using @Temporal annotation in JPA (Hibernate) entity. Information about using Timestamp. Presented on web application and MySQL database. 
]]>
</shortdesc>
<shortname>mapping-date-and-time-in-jpa-hibernate-entity</shortname>
<publishdate>2012-05-27T10:34:46</publishdate>
<length>288</length>
<keywords>java
tutorial
howto
eclipse
jpa
hibernate
eclipselink
date
calendar
timestamp
time
video</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>Why JUnit? What is it good for? When you write some code, you must test it. You usually test it on-the-fly, or you create a main method, where you test your code. But you just did one-time testing and such testing is useless in the long run. Usually customers have nasty habit of changing their requirements and as a result your applications¬† grow and change over time. Testing then becomes more and more difficult. JUnit is a framework, that offers standardized testing.<br /><br />Here I have some method I want to test. This method has following input: field, where is date, integer and date pattern. Using provided date pattern this method will format date into String, add some other stuff and return resulting String. I will test this method using JUnit. In order to do that I must add JUnit to classpath, create a test class and implement a test, that will test this method.<br /><br />Don't bother about adding JUnit to classpath, any decent IDE has JUnit support and will do it on-the-fly. But before creating a test class, it's best practice to create a new source folder dedicated just to tests. Right click your project, Properties, choose Java Build Path, Source, Add Folder, Create New Folder and type name "test". <br /><br />Now we will create a test class. Right click your class and choose New, JUnit test case and here you can choose several options. Choose all of them, I will explain them later. Change source folder to "test". Click Next. Here you can select methods for which you will create tests. Click Finish and if you didn't do this operation before, Eclipse will ask you if you want to add JUnit library to classpath. Click OK.<br /><br />Eclipse generated a method stub with calls a method fail with String parameter "Not yet implemented". To run JUnit right click, Run As, JUnit test. This test failed with message "Not Yet implemented". In the next screencast I will show you how to implement this test.</p>
]]>
</description>
<name>
<![CDATA[
JUnit tutorial, how to create a test class in Eclipse IDE part 1
]]>
</name>
<youtubeid>QEyxgtCEWMw</youtubeid>
<shortdesc>
<![CDATA[
JUnit tutorial, how to create a test class (test case) in Eclipse IDE.
]]>
</shortdesc>
<shortname>junit-tutorial-how-to-create-a-test-class-in-eclipse-ide</shortname>
<publishdate>2012-03-12T13:03:48</publishdate>
<length>285</length>
<keywords>java
JUnit
testing
unit testing
eclipse
tutorial
howto
test case
JUnit framework
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to enable and use expressions with annotations in Spring Security. Specifically I will show you how to use PreAuthorize annotation.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 33: Spring Security PreAuthorize
]]>
</name>
<youtubeid>MeyQMLuaf10</youtubeid>
<shortdesc>
<![CDATA[
How to enable and use expressions with annotations in Spring Security. Specifically I will show you how to use PreAuthorize annotation.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-33-spring-security-preauthorize</shortname>
<publishdate>2014-04-23T18:37:43</publishdate>
<length>468</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
framework spring
spring framework
preauthorize
spring security
expression
annotation
authentication
hasRole</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p style="margin-bottom: 0cm; font-weight: normal;">Eclipse is a great IDE thanks to lots of plugins for easier development.</p>
<p style="margin-bottom: 0cm; font-weight: normal;">Latest Eclipse versions have integrated Eclipse Marketplace for easy plugin installation. Click Help -&gt; Eclipse Marketplace and you will see a dialog with some plugins. You can here use fulltext search to find plugins. Also you can click on tab Popular and see some most popular plugins, such as:</p>
<ul>
<li>
<p style="margin-bottom: 0cm; font-weight: normal;">Subclipse,</p>
</li>
<li>
<p style="margin-bottom: 0cm; font-weight: normal;">Maven 	Integration for Eclipse,</p>
</li>
<li>
<p style="margin-bottom: 0cm; font-weight: normal;">EGit,</p>
</li>
<li>
<p style="margin-bottom: 0cm; font-weight: normal;">and FindBugs.</p>
</li>
</ul>
<p style="margin-bottom: 0cm; font-weight: normal;">You can easily install additional plugins simply by clicking Install button.</p>
]]>
</description>
<name>
<![CDATA[
How to install Eclipse plugins from Eclipse marketplace
]]>
</name>
<youtubeid>4TMhAuEIpns</youtubeid>
<shortdesc>
<![CDATA[
How to easily install Eclipse plugins from Eclipse marketplace.
]]>
</shortdesc>
<shortname>how-to-install-eclipse-plugins-from-eclipse-marketplace</shortname>
<publishdate>2012-02-17T11:39:34</publishdate>
<length>94</length>
<keywords>eclipse
java
tutorial
howto
video
plugin
eclipse marketplace</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Plugin Findbugs is very popular plugin for source code analysis. First you must install this plugin from Eclipse Marketplace as described in previous screencast. <br /><br />Next goto Window -&gt; Preferences and choose Java -&gt; Findbugs. There you can customize how serious bugs will Findbugs report. Set this so it will report all bugs. <br /><br />Now if you want to check your code for bugs, right click on your project and choose Find Bugs -&gt; Find Bugs. Bugs will appear in your code and you can try to fix them. Also you can review all bugs in one place. <br /><br />Each bug has some description. As you can see, I forgot to close this stream. So I'll correct this problem. Now I'll re-run FindBugs. <br /><br />Now I created another possible bug. This outStream can be null and you can't call method on a null object. So I must check if outStream is different than null. <br /><br />Now you can see that I resolved all bugs.</p>
]]>
</description>
<name>
<![CDATA[
How to use plugin FindBugs in Eclipse
]]>
</name>
<youtubeid>Pd13pnW1BbE</youtubeid>
<shortdesc>
<![CDATA[
How to use Eclipse plugin FindBugs, which is a very popular plugin for source code analysis.
]]>
</shortdesc>
<shortname>how-to-use-plugin-findbugs-in-eclipse</shortname>
<publishdate>2012-02-17T13:56:18</publishdate>
<length>184</length>
<keywords>eclipse
java
tutorial
howto
video
plugin
findbugs
eclipse marketplace</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>First you must have an Eclipse project. Next right click in Package Explorer, select Import and choose General -&gt; Existing Projects into Workspace. <br /><br />Select a directory and Eclipse will show you all projects in that directory. You can then use that project from the place where it it now or you can select to copy your project into your workspace. Click Finish and you have successfully imported this project.</p>
]]>
</description>
<name>
<![CDATA[
How to import a project into your Eclipse workspace
]]>
</name>
<youtubeid>IkYngHQTx7Y</youtubeid>
<shortdesc>
<![CDATA[
How to import an existing project into your Eclipse workspace?
]]>
</shortdesc>
<shortname>how-to-import-a-project-into-your-eclipse-workspace</shortname>
<publishdate>2012-02-17T14:23:09</publishdate>
<length>50</length>
<keywords>eclipse
java
tutorial
howto
video
workspace
import
project</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>One of the first things I usually do when I install new Eclipse, I turn on line numbers in Eclipse editor. How to do that? Very easily. Open some file in Eclipse and on the left side of a window with a file contents right click and select Show Line Numbers. This will show line numbers in all files, not just this one.<br /><br />Thanks to CVUT FD for this tip!</p>
]]>
</description>
<name>
<![CDATA[
How to show line numbers in Eclipse
]]>
</name>
<youtubeid>7LNBM7mYsBU</youtubeid>
<shortdesc>
<![CDATA[
How to show line numbers in Eclipse.
]]>
</shortdesc>
<shortname>how-to-show-line-numbers-in-eclipse</shortname>
<publishdate>2012-02-17T18:13:46</publishdate>
<length>51</length>
<keywords>eclipse
java
tutorial
howto
video
Line Numbers
Show Line Numbers</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>If you're like me and don't want to destroy your eyes more than necessary, you might want to increase font size in Eclipse. Goto Window -&gt; Preferences. Search for font. Choose Basic and choose Text Font. Click Edit and change font size to your liking.</p>
]]>
</description>
<name>
<![CDATA[
How to increase (change) font size in Eclipse
]]>
</name>
<youtubeid>Un5LArhDof0</youtubeid>
<shortdesc>
<![CDATA[
How to increase (change) font size in Eclipse.
]]>
</shortdesc>
<shortname>how-to-increase-change-font-size-in-eclipse</shortname>
<publishdate>2012-02-17T18:59:21</publishdate>
<length>59</length>
<keywords>eclipse
java
tutorial
howto
video
Font size</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Sometimes you might want to change JRE or JDK associated with some Eclipse project. Right click your project and choose properties. Select Java Build Path -&gt; Libraries, select JRE System Library, click Edit and choose whichever JRE or JDK you like. You can also add from this screen a new JRE or JDK. <br /><br />If your project has facets and you just changed Java version, be sure to select Project Facets and change Java version. If you don't see Project Facets in this menu, don't be alarmed. Not all projects have them. As far as I know, it's mainly specific to Java EE.</p>
]]>
</description>
<name>
<![CDATA[
How to change JRE / JDK in Eclipse project.
]]>
</name>
<youtubeid>S5xeXawYgK0</youtubeid>
<shortdesc>
<![CDATA[
How to change JRE / JDK associated with Eclipse project.
]]>
</shortdesc>
<shortname>how-to-change-jre--jdk-in-eclipse-project</shortname>
<publishdate>2012-02-17T20:44:25</publishdate>
<length>104</length>
<keywords>eclipse
java
tutorial
howto
video
JRE
Eclipse project</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Formatting your code in Eclipse is very useful and very easy, so I use it a lot. Just press CONTROL + SHIFT + F. <br /><br />There's one problem and it's line length. By default a Java file can have in Eclipse only 80 characters. This is a very small number in the era of big computer monitors. To change this you must go to Window -&gt; Preferences, choose Java -&gt; Code Style -&gt; Formatter.<br /><br />There is formatting configuration. Standard Eclipse built-in configuration is only read-only, so click New and create your custom format using default Eclipse configuration.<br /><br />You can see that you can change many things in this configuration, but right now we're interrested only in maximum line length. Goto Line Wrapping and set Maximum line width to your liking. 200 or 300 characters per line should be sufficient.<br /><br />Now if you press CONTROL + SHIFT + F, Eclipse will use this new format.</p>
]]>
</description>
<name>
<![CDATA[
How to format code in Eclipse and set maximum line length (width)
]]>
</name>
<youtubeid>v8xOpfXHqdo</youtubeid>
<shortdesc>
<![CDATA[
How to format code in Eclipse and set maximum line length (width) creating a new customized formatter.
]]>
</shortdesc>
<shortname>how-to-format-code-in-eclipse-and-set-maximum-line-length-width</shortname>
<publishdate>2012-02-18T09:15:50</publishdate>
<length>146</length>
<keywords>eclipse
java
tutorial
howto
video
line length
line width
format code
formatting
formatter</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>What is logging about and what is it good for? Logging is essential for debugging or maintaining your application. You must know what is going on in your application, especially when an error occures. How can you do that? Using logging.<br /><br />You can type System.out.println() or exception.printStackTrace() and print your logging code into standard output. Or you can create some class and print your logging code into some file. Or you can use some logging framework.<br /><br />There are many different logging frameworks. Log4j, Logback, Apache Commons Logging or Java util logging (JUL) to name few. Nowadays is mostly used Log4j.<br /><br />Because there are many different logging frameworks, which one is best for your application? It's hard to say. But if you tie your code with one particular logging framework, then in the future if you get into a situation that you would want to change your logging framework, you would have to go to your code and change it. It would be nice if something would shield you from particular logging framework. And that something is framework slf4j (Simple Logging Facade for Java). It's not a logging framework, but a facade, that shields your code from particular logging framework. So if you ever want to change that logging framework, you won't have to change your code.</p>
]]>
</description>
<name>
<![CDATA[
Java logging 101
]]>
</name>
<youtubeid>DBG_YBWn4_c</youtubeid>
<shortdesc>
<![CDATA[
Java logging 101, overview of Java logging frameworks: Log4j, Logback, Apache Commons Logging, Java util logging (JUL) and SLF4J.
]]>
</shortdesc>
<shortname>java-logging-101</shortname>
<publishdate>2012-03-03T13:31:15</publishdate>
<length>121</length>
<keywords>java
logging
log4j
slf4j
howto
tutorial
video</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>You can specify these options during application startup or in JAVA_OPTS parameter. Default or low settings of these Java options cause OutOfMemoryError.<br /><br /></p>
<ul>
<li style="text-align: left;"><strong>During application startup:</strong> java -jar -Xmx1g -XX:MaxPermSize=256m application.jar</li>
<li style="text-align: left;"><strong>Using JAVA_OPTS parameter in Windows:</strong> set JAVA_OPTS=%JAVA_OPTS% -Xmx1g -XX:MaxPermSize=256m</li>
<li style="text-align: left;"><strong>Using JAVA_OPTS parameter in Linux:</strong> export JAVA_OPTS="$JAVA_OPTS -Xmx1g -XX:MaxPermSize=256m"</li>
</ul>
<p style="text-align: left;"><br /><strong>-Xmx </strong>defines a maximum heap size of JVM. Inside heap are all Java objects.<br /><br /><strong>-XX:MaxPermSize </strong>defines a maximum size of separate heap space that is not garbage collected (that's why it's permanent) and it contains Java classes that are loaded in memory. Whatever is allocated to perm is in addition to the heap set with -Xmx.<br /><br />Btw. there are a number of separate memory pools in the JVM, whose maximum sizes are set separately, so if you monitor your Java process, you may see the amount of memory you use exceed the total amount you have specified for ‚ÄìXmx and -XX:MaxPermSize, because Java must also allocate memory for other things, including a stack for each thread. It is not unusual for the total memory consumption of the VM to exceed the value of Xmx + XX:MaxPermSize.</p>
]]>
</description>
<name>
<![CDATA[
How to increase Java memory: fix
]]>
</name>
<youtubeid>Gv3MBu8FzZQ</youtubeid>
<shortdesc>
<![CDATA[
How to increase memory for Java application using Xmx and XX:MaxPermSize Java options. Solution of out of memory error (OutOfMemoryError).
]]>
</shortdesc>
<shortname>how-to-increase-java-memory-fix</shortname>
<publishdate>2012-06-23T09:36:45</publishdate>
<length>119</length>
<keywords>java
howto
tutorial
java memory
increase java memory
java memory fix
java memory error
outofmemoryerror
out of memory error
java out of memory error
xmx
maxpermsize
xx:maxpermsize</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>You can run each JUnit test using Run As -&gt; JUnit test. But what if you have more JUnit tests and you want to run them easier?<br /><br />If you want to run all JUnit tests in some package, just right click on that package and select Run As -&gt; JUnit test. You can also select multiple packages.<br /><br />If you want more fine control over JUnit test execution, create a JUnit test suite. <br /><br />Right click and select New -&gt; Other -&gt; New JUnit Test Suite, choose name of the suite, select which test classes will be included in this test suite and select finish. This will create a class with annotation @SuiteClasses. Inside are defined JUnit test cases which will be included in this test suite. You can even call here another test suite. Now you can easily run this whole suite using Run As -&gt; JUnit test.</p>
]]>
</description>
<name>
<![CDATA[
JUnit test suite in Eclipse tutorial
]]>
</name>
<youtubeid>4TQsZSewv40</youtubeid>
<shortdesc>
<![CDATA[
JUnit test suite explained. How to create one in Eclipse and how to even easier run test cases in some package.
]]>
</shortdesc>
<shortname>junit-test-suite-in-eclipse-tutorial</shortname>
<publishdate>2012-05-21T19:41:50</publishdate>
<length>112</length>
<keywords>java
JUnit
testing
unit testing
eclipse
tutorial
howto
test case
JUnit framework
assertequals
JUnit tutorial
junit example
junit eclipse
howto
junit test suite
video</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>How to run Eclipse with selected Java runtime (eclipse.ini vm argument)<br /><br /><br />Eclipse startup is controlled by the options in eclipse.ini file. It is a text file containing command-line options that are added to the command line used when Eclipse is started up. There are many options. Now I will show you how to use "-vm" option, which defines under which Java runtime will be Eclipse started. <br /><br />If you want to modify eclipse.ini file, you must be aware of the following:<br /><br /></p>
<ol>
<li>Each option and each argument to an option must be on its own line.</li>
<li>All lines after -vmargs are passed as arguments to the JVM, so all arguments and options for Eclipse must be specified before -vmargs (just like when you use arguments on the command-line).</li>
</ol>
<p><br />So before line with "-vmargs" add line "-vm" and after that add line with absolute path to javaw.exe. Now when you start Eclipse, it will be started using this runtime.</p>
]]>
</description>
<name>
<![CDATA[
How to run Eclipse with selected vm
]]>
</name>
<youtubeid>_6mnQ2LlhIc</youtubeid>
<shortdesc>
<![CDATA[
How to run Eclipse with selected Java runtime (eclipse.ini vm argument).
]]>
</shortdesc>
<shortname>how-to-run-eclipse-with-selected-vm</shortname>
<publishdate>2012-06-16T14:24:13</publishdate>
<length>131</length>
<keywords>java
eclipse
howto
vm
eclipse.ini
eclipse.ini vm
startup
jvm
java runtime
jre
jdk</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to force UTF-8 so that forms work on Apache Tomcat. Using CharacterEncodingFilter from Spring framework.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 34: utf-8
]]>
</name>
<youtubeid>mByzoSmdXsU</youtubeid>
<shortdesc>
<![CDATA[
How to force UTF-8 so that forms work on Apache Tomcat. Using CharacterEncodingFilter from Spring framework.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-34-utf-8</shortname>
<publishdate>2014-04-23T18:39:12</publishdate>
<length>119</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
UTF-8
java blog aggregator
aggregator
Apache Tomcat (Software)
framework spring
spring framework
web application
character encoding filter
encoding
http
form
post</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>First you must download Log4j and SLF4J frameworks. Next put to project's classpath these JARs: log4j, slf4j-api and slf4j-log4j. Log4J is your logging framework. SLF4J-API is SLF4J framework. SLF4J-LOG4J is a bridge between SLF4J and LOG4J.<br /><br />Log4j needs also some configuration, where is defined what will be logged and where will be logging information saved. This configuration is typically done using file with filename log4j.properties or log4j.xml. Don't bother about configuration in these files, yet. I will explain it later. Log4j will search for these files in classpath. So put into src file log4j.properties. Btw. it can be elsewhere, in this case you must run your application with -log4j.configuration="file_name".<br /><br />Logging is done using object of type Logger. Create private static final Logger logger = LoggerFactory.getLogger(ClassName.class).<br /><br />Now we can finally do some logging. It is done using these methods of class Logger:</p>
<ul>
<li>debug</li>
<li>trace</li>
<li>info</li>
<li>warn</li>
<li>error</li>
</ul>
<p>Error method is used for error messages, debug method is used for debugging code etc.</p>
<p><strong>used log4j.properties file:</strong></p>
<p>log4j.rootLogger=INFO, stdout<br /> log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br />log4j.appender.stdout.Target=System.out<br />log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br />log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</p>
]]>
</description>
<name>
<![CDATA[
Logging using Log4j and SLF4J in Java SE application
]]>
</name>
<youtubeid>DhzYmpxzdnk</youtubeid>
<shortdesc>
<![CDATA[
Logging using Log4j and SLF4J in Java SE application.
]]>
</shortdesc>
<shortname>logging-using-log4j-and-slf4j-in-java-se-application</shortname>
<publishdate>2012-03-03T15:29:10</publishdate>
<length>302</length>
<keywords>java
logging
eclipse
log4j
slf4j
tutorial
howto
video</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>Be sure to check first screencast Logging using Log4j and SLF4J in Java SE application, because in this screencast it is expected that you are familiar with basics.<br /><br />First we must add three jars - log4j, slf4j-api and slf4j-log4j to classpath. Copy them to WEB-INF/lib folder. <br /><br />Next we must add log4j to classpath. Put it to src folder.<br /><br />Rest is the same as with Java SE application. In a class where you want to use logging, you must create a logger attribute and then you log using debug/trace/info/warn/error methods from Logger class.</p>
]]>
</description>
<name>
<![CDATA[
Java Log4J, SLF4J logging in Java EE application
]]>
</name>
<youtubeid>FD_D2nyPeVg</youtubeid>
<shortdesc>
<![CDATA[
Java Log4J, SLF4J logging Java EE application in Eclipse.
]]>
</shortdesc>
<shortname>java-log4j-slf4j-logging-in-java-ee-application</shortname>
<publishdate>2012-03-03T20:20:46</publishdate>
<length>187</length>
<keywords>java
logging
log4j
slf4j
tutorial
howto
eclipse
video</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>If you want to do logging in some class, you must first import org.slf4j.Logger and org.slf4j.LoggerFactory, next you must create a logger attribute and after that you can start logging. This is very tedious. You can automate this process by creating an Eclipse logging template.<br /><br />Go to Window-&gt;Preferences, choose Java-&gt;Editor-&gt;Templates and click New. Fill in this information:<br /><br /><strong>Name:</strong> logger<br /><strong>Context:</strong> Java type members<br /><strong>Description:</strong> create new logger<br /><strong>Pattern:</strong></p>
<p>${:import(org.slf4j.Logger,<br /> org.slf4j.LoggerFactory)}<br />private static final Logger logger =<br /> LoggerFactory.getLogger(${enclosing_type}.class);<br /><br /><br />Now if you want to create a logging attribute, just type logging and press CONTROL + SPACE. This will choose this template. Press enter and you have just successfully imported SLF4J Logger, LoggerFactory and created logger attribute.</p>
]]>
</description>
<name>
<![CDATA[
Java logging template in Eclipse
]]>
</name>
<youtubeid>xPXAw2XQ14Y</youtubeid>
<shortdesc>
<![CDATA[
How to create a Java logging template in Eclipse IDE for easy logging using Eclipse.
]]>
</shortdesc>
<shortname>java-logging-template-in-eclipse</shortname>
<publishdate>2012-03-03T20:35:49</publishdate>
<length>132</length>
<keywords>java
eclipse
template
logging
log4j
slf4j
tutorial
howto
video</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>JavaZone 2012 will be in September, but a promo video is already out! This year it's The Java Heist and the main actor is Alan Ford known for his role in Snatch:<br /><br />The Java Heist: http://www.youtube.com/watch?v=HXvm76e2X1Q<br /><br />I think that it is much better than last year with JavaZone X: The Streaming, which was kind of scary:<br /><br />JavaZone X: The Streaming: http://www.youtube.com/watch?v=5U1_KW6ww7Y<br /><br />But for me personally was the best year 2010 with Java 4-Ever and LadyJava:<br /><br />Java 4-Ever: http://www.youtube.com/watch?v=kLO1djacsfg<br />LadyJava: http://www.youtube.com/watch?v=1JZnj4eNHXE</p>
]]>
</description>
<name>
<![CDATA[
JavaZone 2012: The Java Heist
]]>
</name>
<youtubeid>Z3xYd-4RzpI</youtubeid>
<shortdesc>
<![CDATA[
JavaZone 2012 will be in September, but a promo video is already out!
]]>
</shortdesc>
<shortname>javazone-2012-the-java-heist</shortname>
<publishdate>2012-06-23T15:21:39</publishdate>
<length>35</length>
<keywords>javazone
javazone 2012
the java heist
alan ford
javazone x
java 4-ever
lady java
java</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Example of Cross Site Scripting (XSS) and how to solve this problem using c out tag from JSTL.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 35: Cross Site Scripting - XSS
]]>
</name>
<youtubeid>0udG5OETQMw</youtubeid>
<shortdesc>
<![CDATA[
Example of Cross Site Scripting (XSS) and how to solve this problem using c out tag from JSTL.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-35-cross-site-scripting-xss</shortname>
<publishdate>2014-04-23T18:39:59</publishdate>
<length>202</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Cross-site Scripting (Ranked Item)
Web Application (Industry)
spring framework
framework spring
java blog aggregator
aggregator
xss
core
jstl
jsp</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>First let's test if Java works. Goto http://java.com and click on this link "Do I have Java?" and Verify Java version. As you can see, Java plugin by default requires your permission to run, so it's disabled by default. But you may want to disable it permanently or remove your permission. Now I will show you how. I will select to always run Java on this site.</p>
<p>Now if you see something like this, then you have Java plugin enabled.</p>
<p>How to disable it?</p>
<p>Goto Customize -&gt; Settings -&gt; Show Advanced Settings -&gt; Privacy -&gt; Content settings ... -&gt; Plug-ins</p>
<p>And there you can manage your permissions or you can disable plugins permanently. There choose to disable Java plugin.</p>
<p>Now go back into java.com and see if Java works and now you should see that no working Java was detected on your system, so you successfully disabled it.</p>
]]>
</description>
<name>
<![CDATA[
How to disable Java in Chrome
]]>
</name>
<youtubeid>qvSqAF6FAaE</youtubeid>
<shortdesc>
<![CDATA[
How to disable Java plugin in Google Chrome.
]]>
</shortdesc>
<shortname>how-to-disable-java-in-chrome</shortname>
<publishdate>2013-01-13T10:27:06</publishdate>
<length>115</length>
<keywords>java
tutorial
howto
disable java plugin
disable
google chrome
chrome</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>Sometimes you may need to decompile class files back into original java files. You can easily do that using Java decompiler http://java.decompiler.free.fr/ Download JD-GUI, run this application, open JAR or class file and you will see original java files.</p>
]]>
</description>
<name>
<![CDATA[
Java class decompiler
]]>
</name>
<youtubeid>1VADUoJjRVE</youtubeid>
<shortdesc>
<![CDATA[
How to decompile Java class files and JAR files into original java files using Java decompiler (jd-gui).
]]>
</shortdesc>
<shortname>java-class-decompiler</shortname>
<publishdate>2013-01-01T20:12:33</publishdate>
<length>77</length>
<keywords>java
decompiler
class
jar
howto
tutorial</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>First you must define level of logging. On one hand if you set level to ALL, you will log everything, on the other hand if you set level to OFF, you will turn off logging completely. Next you must define appenders. They define what will happen with a logging information. ConsoleAppender will print log to standard output. FileAppender will save log to a file. RollingFileAppender will save log to a file and will split this file if it reaches certain size. And much more. You can name your appender any way you like.</p>
<p><strong>ConsoleAppender:</strong></p>
<p>log4j.rootLogger=DEBUG, stdout<br /># Direct log messages to stdout<br />log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br />log4j.appender.stdout.Target=System.out<br />log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br />log4j.appender.stdout.layout.ConversionPattern=%d %5p %c:%L - %m%n</p>
<p><strong>FileAppender:</strong></p>
<p>log4j.rootLogger=DEBUG, file<br /># Log messages in the admin.log file.<br />log4j.appender.file=org.apache.log4j.FileAppender<br />log4j.appender.file.File=admin.log<br />log4j.appender.file.layout=org.apache.log4j.PatternLayout<br />log4j.appender.file.layout.ConversionPattern= %-4r [%t] %-5p %c %x - %m%n</p>
<p><strong>RollingFileAppender:</strong></p>
<p>log4j.rootLogger=DEBUG, rfile<br /># Log messages in the logs/applog.log file. Max size will be 100KB<br />log4j.appender.rfile = org.apache.log4j.RollingFileAppender<br />log4j.appender.rfile.File = logs/applog.html<br />log4j.appender.rfile.MaxFileSize = 100KB<br />log4j.appender.rfile.Append = true<br />log4j.appender.rfile.layout = org.apache.log4j.HTMLLayout</p>
]]>
</description>
<name>
<![CDATA[
log4j.properties explained part 1
]]>
</name>
<youtubeid>E6NhHDUCNQY</youtubeid>
<shortdesc>
<![CDATA[
log4j.properties explained - levels of logging, appenders - Console, File and RollingFile appenders.
]]>
</shortdesc>
<shortname>log4jproperties-explained-part-1</shortname>
<publishdate>2012-03-04T09:06:51</publishdate>
<length>302</length>
<keywords>java
log4j
eclipse
logging
logger
appender
error
debug
info
warn
logging level
tutorial
howto
video</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>Eclipse Juno has been released! It runs now on Eclipse 4.2 so under the hood there has been some major changes. This will no doubdt result in plugins incompatibility, although officially everything should work because Eclipse SDK 4.2 is upwards binary compatible with previous version 3.8.<br /><br />Anyways, you should check if plugins you use work. If not, you will be probably stuck with Indigo for a while. <br /><br />Now for some new features. This is a first look, so it is by no means full set of new features in Eclipse Juno.<br /><br />The first one you have already seen is a new look.<br /><br />Next is a Quick Access for quick access to perspectives, views and commands in menus.<br /><br />Switching perspectives is much more easier than before. If you open a new perspective, a button for this perspective will stay visible. You can hide it if you right click on it and select "close".</p>
]]>
</description>
<name>
<![CDATA[
Eclipse Juno first look part 1
]]>
</name>
<youtubeid>y8-PSiwgOl4</youtubeid>
<shortdesc>
<![CDATA[
Eclipse Juno has been released. This is a first look on Quick Access to perspectives, views and commands in menus.
]]>
</shortdesc>
<shortname>eclipse-juno-first-look</shortname>
<publishdate>2012-06-30T11:12:34</publishdate>
<length>138</length>
<keywords>java
eclipse
howto
eclipse juno
quick access
eclipse perspective
eclipse view
eclipse command
eclipse menu</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>Another new features in Eclipse Juno include:<br /><br />You can drag &amp; drop a window outside of Eclipse. This is useful if you have more screens. <br /><br />Next improvement is in changing window size. If you wanted to change two windows at once, you had to first change the first one and next the second one. Now you can do it easily at one time.<br /><br />And now the most important change. You can install plugin Code Recommenders. Just goto Help -&gt; Install new software, select "Juno - http://download.eclipse.org/releases/juno" and search for Code Recommenders. Next Install this plugin and restart your Eclipse. I already done that and now I will show you what it does. <br /><br />In your content assist window it preferes methods that are relevant for the task at hand. For example I have just created a frame. Now I want to create a panel, add inside a button and put a panel to a frame. <br /><br />I will create a button. Content assist recommends me to set text. Now I will create a panel. Content assist recommends me to set layout. Next it recommends me to add a component.<br /><br />I will put panel to a frame and I'm done.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse Juno first look part 2
]]>
</name>
<youtubeid>1zh5ggyNsFY</youtubeid>
<shortdesc>
<![CDATA[
Another cool features of Eclipse Juno with plugin Code Recommenders: How to install and use this new plugin.
]]>
</shortdesc>
<shortname>eclipse-juno-first-look-part-2</shortname>
<publishdate>2012-07-04T14:32:21</publishdate>
<length>205</length>
<keywords>java
eclipse
howto
eclipse juno
eclipse juno java
eclipse juno ide
code recommenders
content assist</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to validate input using Hibernate Validator (Bean Validation)? How to validate email, URL etc.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 36: Hibernate Validator
]]>
</name>
<youtubeid>2J8HUgte7Ew</youtubeid>
<shortdesc>
<![CDATA[
How to validate input using Hibernate Validator (Bean Validation)? How to validate email, URL etc.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-36-hibernate-validator</shortname>
<publishdate>2014-04-23T18:41:20</publishdate>
<length>585</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
framework spring
spring framework
java blog aggregator
aggregator
hibernate
jpa
Java Persistence API (Software)
hibernate validator
annotation
valid
bean validation
web application</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Because our application grows more and more, some refactoring was needed. In this video I split single Spring MVC controller into multiple controllers.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 37: Refactoring
]]>
</name>
<youtubeid>xCPTf9UlTvA</youtubeid>
<shortdesc>
<![CDATA[
Because our application grows more and more, some refactoring was needed. In this video I split single Spring MVC controller into multiple controllers.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-37-refactoring</shortname>
<publishdate>2014-04-23T18:43:33</publishdate>
<length>640</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
controller
web application
Code Refactoring (Software Genre)
framework spring
spring framework
spring web mvc
java blog aggregator
aggregator
request mapping</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Let's make a user detail</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 13: Path Variable
]]>
</name>
<youtubeid>6LewRDc6DPc</youtubeid>
<shortdesc>
<![CDATA[
How to use Path Variable in Spring Web MVC. 
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-13-path-variable</shortname>
<publishdate>2014-04-23T16:28:49</publishdate>
<length>312</length>
<keywords>howto
spring web mvc
training
java
aggregator
javavids
web application
path variable
basics
spring
spring framework
request mapping
java blog aggregator
eclipse
tutorial</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Eclipse revolves about concept of perspectives. How many perspectives you have depends on how many plugins you have installed. A perspective is a visual container for a set of views and editors. A perspective is also like a page within a book. In a book there are many pages, in Eclipse you have many perspectives and, like a page within a book, only one perspective is visible at one time. <br /><br />You can change current perspective by clicking on this button "Open perspective". In each perspective are views and editors in different parts of screen. You can open a new view in Window -&gt; Show view.<br /><br />You can save your changes you made to your perspective or even create your own perspectives. If you break it, you can reset chosen perspective to defaults.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse IDE perspectives and views
]]>
</name>
<youtubeid>qzgq2fOZ0Ys</youtubeid>
<shortdesc>
<![CDATA[
Eclipse IDE perspectives and views, how to change, save and reset perspective. How to select a view. Eclipse is popular Java IDE.
]]>
</shortdesc>
<shortname>eclipse-ide-perspectives-and-views</shortname>
<publishdate>2012-03-25T09:27:44</publishdate>
<length>107</length>
<keywords>eclipse
java
tutorial
howto
video
perspective
view</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>One of the most useful features in modern programming languages and IDEs is debugging. In Java and Eclipse you must do three things:<br /><br /></p>
<ol>
<li>Set breakpoints. With them you define lines in your code, where your application will pause. You can easily do that by double click here on your selected line.</li>
<li>Next run your application with this Debug button.</li>
<li>Finally when you hit a breakpoint, Eclipse will show you if you want to switch to Debug perspective. Choose Yes and to remember this decision.</li>
</ol>
<p><br />In Debug perspective you have in upper-left corner information about running threads and several buttons for managing your debugging. If you terminate debugging, your application will finish. If you resume, your application will continue running until next breakpoint. You can step into called method, step over one line or step to end of this method.<br /><br />In upper-right corner you have variables and their values. You can define your own watched variables. Choose what you want to watch and select Watch. This will show dialog "Expressions" with your selected expression.<br /><br />In dialog "Breakpoints" you have breakpoints in your application. At any time you can activate or deactivate breakpoints. You can also do the same on any breakpoint in your code. Breakpoints can also be activated on some specified condition.<br /><br /></p>
]]>
</description>
<name>
<![CDATA[
How to use Eclipse debugger tutorial
]]>
</name>
<youtubeid>1sKnGW1eXUM</youtubeid>
<shortdesc>
<![CDATA[
How to use Eclipse debugger tutorial, debugging Java application, selecting breakpoints and watched resources.
]]>
</shortdesc>
<shortname>how-to-use-eclipse-debugger-tutorial</shortname>
<publishdate>2012-03-25T11:00:32</publishdate>
<length>163</length>
<keywords>eclipse
java
tutorial
howto
video
debug
debugging
debugger
breakpoint
watch expression</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Eclipse has enabled spell checking by default. For some people it may be a good feature, but for many it's just useless. So if you write some word that isn't in spellcheck dictionary, Eclipse will underscore it. How to turn it off? In Java class simply point your mouse to such word and select "Disable spell checking". <br /><br />You can also change this in Eclipse preferences. Go to: Window -&gt; Preferences, choose General, Editors, Text Editors, Spelling and disable spell checking. <br /><br />If you want to have spell checking enabled and you just want to change some settings, you can also do that here.</p>
]]>
</description>
<name>
<![CDATA[
How to disable / enable spell checking in Eclipse
]]>
</name>
<youtubeid>M-ByTpPV1sI</youtubeid>
<shortdesc>
<![CDATA[
How to disable / enable spell checking in Eclipse or change spell checker options.
]]>
</shortdesc>
<shortname>how-to-disable--enable-spell-checking-in-eclipse</shortname>
<publishdate>2012-03-25T11:28:20</publishdate>
<length>69</length>
<keywords>eclipse
java
tutorial
howto
video
spell checking
spell checker
enable
disable
options</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>You can install Eclipse plugins by clicking Help -&gt; Eclipse marketplace, or you can open Eclipse marketplace in browser, choose some plugin and easily install this plugin by dragging this icon to your Eclipse. Be sure to drop it up here, not anywhehere else.<br /><br />Also when you browse Eclipse marketplace you will see this icon. It's not an icon for plugin installation, but a link to page where is some introduction to Eclipse marketplace.</p>
]]>
</description>
<name>
<![CDATA[
How to install Eclipse plugins using browser
]]>
</name>
<youtubeid>DQ2wfwLBzws</youtubeid>
<shortdesc>
<![CDATA[
How to install Eclipse plugins from Eclipse online marketplace, Findbugs installation.
]]>
</shortdesc>
<shortname>how-to-install-eclipse-plugins-using-browser</shortname>
<publishdate>2012-02-17T11:40:34</publishdate>
<length>115</length>
<keywords>eclipse
java
tutorial
howto
video
marketplace
eclipse marketplace
findbugs
plugin
installation</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>Joda time is a popular open source library that provides replacement for the standard Java date and time classes like Date, Calendar and SimpleDateFormat. Lot's of projects use Joda time instead JDK date and time.</p>
<p>Joda time is interoperable with JDK date and time.</p>
<p>First add Joda time JARs to build path.</p>
<p>To get current date create instance of DateTime class:</p>
<p>DateTime currentDate = new DateTime();</p>
<p>¬†</p>
<p>To get current day, month, year etc. call getDayOfMonth(), getMonthOfYear(), getYear() etc.</p>
<p>To add or subtract call plusXXX() or minusXXX() method.</p>
<p>To format or parse date use class DateTimeFormatter.</p>
<p>All of this is much easier than using standard JDK date and time.</p>
]]>
</description>
<name>
<![CDATA[
Using Joda time
]]>
</name>
<youtubeid>x0DAnpnqUAY</youtubeid>
<shortdesc>
<![CDATA[
Joda time is a popular open source library that provides replacement for the standard Java date and time classes like Date, Calendar and SimpleDateFormat.
]]>
</shortdesc>
<shortname>using-joda-time</shortname>
<publishdate>2013-01-03T11:50:55</publishdate>
<length>112</length>
<keywords>joda time
simpledateformat
date
time
java
howto
tutorial</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create a dynamic menu using Apache Tiles and Twitter Bootstrap, how to use tilesx:useAttribute and how to use Expression Language ternary operator.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 12: Apache Tiles dynamic menu
]]>
</name>
<youtubeid>XjV0sxJtI6I</youtubeid>
<shortdesc>
<![CDATA[
How to create a dynamic menu using Apache Tiles and Twitter Bootstrap, how to use tilesx:useAttribute and how to use Expression Language ternary operator.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-12-apache-tiles-dynamic-menu</shortname>
<publishdate>2014-04-23T16:26:03</publishdate>
<length>194</length>
<keywords>training
howto
aggregator
eclipse
java blog aggregator
spring
twitter bootstrap
expression language
tutorial
java
javavids
web application
spring framework
basics
jsp
tilesx
apache tiles
ternary operator</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>There are several JUnit assertion methods and they are all static methods defined in org.junit.Assert class. You can easily use them if you do import static org.junit.Assert.*;<br /><br /></p>
<ul>
<li><strong>fail()</strong> - fails test</li>
<li><strong>assertNotNull(o) / assertNull(o)</strong> - assert if object is (not) null</li>
<li><strong>assertFalse(b) / assertTrue(b)</strong> - asserts if b is false / true</li>
<li><strong>assertEquals(a, b)</strong> - compares two objects using equals() method: a.equals(b)</li>
<li><strong>assertSame(a, b)</strong> - compares two objects using == operator:¬† a == b</li>
<li><strong>assertArrayEquals(a, b)</strong> - compares two arrays </li>
<li><strong>assertThat(o, condition)</strong> - asserts that o satisfies the condition specified by an instance of org.hamcrest.Matcher</li>
</ul>
]]>
</description>
<name>
<![CDATA[
JUnit assertions methods
]]>
</name>
<youtubeid>RaFswvDJ6MA</youtubeid>
<shortdesc>
<![CDATA[
JUnit assertions methods: assertEquals, assertSame, assertNull, assertNotNull, assertTrue, assertFalse explained.
]]>
</shortdesc>
<shortname>junit-assertions-methods</shortname>
<publishdate>2012-03-25T18:40:00</publishdate>
<length>115</length>
<keywords>assertSame
assertNull
assertNotNull
assertTrue
assertFalse
video
assert</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>Sometimes you want to test that some method returns expected exception. You can easily do that by specifying attribute "expected" on annotation @Test. <br /><br />You can also test that a unit test must take less than X milliseconds to execute, by specifying attribute "timeout" on annotation @Test<br /><br />Sometimes you want to ignore some test (for example you have an unfinished test and your boss tells you to test something else). For such situations is annotation @Ignore</p>
]]>
</description>
<name>
<![CDATA[
JUnit expected exceptions, timeout and ignoring tests
]]>
</name>
<youtubeid>n29j8p1N7zE</youtubeid>
<shortdesc>
<![CDATA[
JUnit expected exceptions, timeout and ignoring tests using @Ignore.
]]>
</shortdesc>
<shortname>junit-expected-exceptions-timeout-and-ignoring-tests</shortname>
<publishdate>2012-03-25T19:18:24</publishdate>
<length>140</length>
<keywords>JUnit
test
eclipse
java
ignore
expected exception
timeout
video</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>So far I showed you a unit test of a method, that doesn't depend on other classes, but often you must create a unit test for such a method. How to do that? You must create a stub for these other classes and write barebone implementation. Other popular solution of this problem is by mocking the classes. <br /><br />In one of my projects I have this service class. This class has a method, that loads the latest version of the application from the internet and compares it with current version. If they differ, user will be notified and suggested to upgrade his application. Now I'd like to test this method: loadLatestVersion(). This method uses an instance of HttpClientService, which connects to some URL and downloads a file to temporary location. Next it will parse this file, retrieve first line and save it to an attribute "latestVersion".<br /><br />First I'll create a JUnit test case for this class. First I will create an attribute of type VersionService. Next I will create a barebone test. Now I must supply to "versionService" attribute an instance of HttpClientService. It is a class, so I will extend it. If it was an interface, then I would implement it. I will create a class HttpClientServiceStub and I will implement a method downloadTemporaryFile.</p>
]]>
</description>
<name>
<![CDATA[
JUnit & stub example
]]>
</name>
<youtubeid>Gon5_SkyiY0</youtubeid>
<shortdesc>
<![CDATA[
How to stub for JUnit test case.
]]>
</shortdesc>
<shortname>junit--stub-example</shortname>
<publishdate>2012-03-27T15:59:30</publishdate>
<length>302</length>
<keywords>junit stub
junit example
junit tutorial
junit eclipse
junit framework
junit
stub
test case
eclipse
java
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>First download HSQL (Hypersonic) database from http://hsqldb.org. Next run it in server mode (run bin/runServer.bat). Btw HSQL is a Java database, which means that in order to run it you must have Java installed.</p>
<p>&nbsp;</p>
<p>In order to connect to this database in Eclipse you must have Eclipse for Java EE developers (or installed plugin Web Tools Platform - WTP).</p>
<p>&nbsp;</p>
<p>Switch to Database development perspective and follow my instructions.</p>
]]>
</description>
<name>
<![CDATA[
Database connection in Eclipse (HSQL)
]]>
</name>
<youtubeid>GHfF9h0-GYY</youtubeid>
<shortdesc>
<![CDATA[
How to connect Hypersonic (HyperSQL / HSQL) database in Eclipse?
]]>
</shortdesc>
<shortname>database-connection-in-eclipse-hsql</shortname>
<publishdate>2014-01-30T12:00:20</publishdate>
<length>194</length>
<keywords>java
eclipse
howto
tutorial
hsql
hsqldb
database
connection</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>If you run embedded Jetty using goal jetty:run, you will notice that when you change some Java class (for example a Servlet), the application won't automatically redeploy, so you will have to stop the whole server and run it again.</p>
<p>&nbsp;</p>
<p>To change that go to pom.xml and add this configuration to the Jetty plugin:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;configuration&gt;
&nbsp; &lt;scanIntervalSeconds&gt;1&lt;/scanIntervalSeconds&gt;
&lt;/configuration&gt;</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Also if you use STS (Spring Tool Suite), in latest versions you have this Relaunch button, which will restart the server.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Maven Embedded Jetty automatic redeploy
]]>
</name>
<youtubeid>TekSQ9bSkqE</youtubeid>
<shortdesc>
<![CDATA[
How to automatically redeploy embedded Jetty if you change some Java class?
]]>
</shortdesc>
<shortname>maven-jetty-embedded-automatic-redeploy</shortname>
<publishdate>2014-01-26T10:44:56</publishdate>
<length>106</length>
<keywords>java
eclipse
howto
tutorial
embedded
jetty
redeploy
deploy
maven</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>How to add JAR file to local Maven repository? This task will be presented on Oracle JDBC driver, because due to licencing reasons this JAR file is not in Maven central repository, but it's widely used in Maven projects.</p>
<p>&nbsp;</p>
<p>First you must have installed Maven, which was presented in my previous video tutorial.</p>
<p>&nbsp;</p>
<p>Next open command line and issue this command:</p>
<pre class="prettyprint">mvn install:install-file -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6<br /> -Dversion=11.2.0 -Dpackaging=jar</pre>
<p>&nbsp;</p>
<p>Afterwards you can reference it in pom.xml using this dependency:</p>
<pre class="prettyprint">&lt;!-- Oracle database driver --&gt;
&lt;dependency&gt;
&nbsp; &lt;groupId&gt;com.oracle&lt;/groupId&gt;
&nbsp; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt;
&nbsp; &lt;version&gt;11.2.0&lt;/version&gt;
&lt;/dependency&gt;</pre>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
How to add JAR file to local Maven repository?
]]>
</name>
<youtubeid>Kvid8C9Htw8</youtubeid>
<shortdesc>
<![CDATA[
How to add JAR file to local Maven repository?
]]>
</shortdesc>
<shortname>how-to-add-jar-file-to-local-maven-repository</shortname>
<publishdate>2014-01-31T08:26:35</publishdate>
<length>197</length>
<keywords>java
eclipse
howto
tutorial
Apache Maven
repository
jar</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to validate form on the client side using JQuery Validation Plugin (JavaScript). Email validation, URL validation etc. How to implement "retype password" functionality. How to integrate JQuery Validation Plugin with Twitter Bootstrap.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 38: JQuery Validation Plugin
]]>
</name>
<youtubeid>igYct4ObHIQ</youtubeid>
<shortdesc>
<![CDATA[
How to validate form on the client side using JQuery Validation Plugin (JavaScript).
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-38-jquery-validation-plugin</shortname>
<publishdate>2014-04-23T18:44:48</publishdate>
<length>646</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Web Application (Industry)
JQuery (Software)
Plug-in (Software Genre)
jquery validation plugin
framework spring
spring framework
java blog aggregator
aggregator
validation
JavaScript (Programming Language)
Twitter Bootstrap (Software)</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p>How to handle exceptions properly since Java 7? You can still use the classic way, or you can use the new try-with-resources block. After try block put parenthesis and inside open stream. After this block closes, the stream will be automatically closed as well. To handle exceptions add catch block.</p>
<pre class="prettyprint">try (BufferedReader reader = new BufferedReader(new FileReader("file.txt"))) {<br />	String line = null;<br />	while ((line = reader.readLine()) != null) {<br />		System.out.println(line);<br />	}<br />} catch (IOException ex) {<br />	ex.printStackTrace();<br />}</pre>
]]>
</description>
<name>
<![CDATA[
How to work with streams properly since Java 7
]]>
</name>
<youtubeid>wMO8rcvmLJY</youtubeid>
<shortdesc>
<![CDATA[
How to work with streams properly since Java 7 using try-with-resources block.
]]>
</shortdesc>
<shortname>how-to-work-with-streams-properly-since-java-7</shortname>
<publishdate>2012-03-29T06:46:43</publishdate>
<length>134</length>
<keywords>java
eclipse
java text file
java streams
java streams tutorial
java file io
java file reader
java file input output
java file tutorial
java file
bufferedreader
filereader
findbugs
java ioexception
java 7
video</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p>Which character set Character streams use? This depends on your operating system and it's locale. If you know in which encoding (charset) is your file, you can use InputStreamReader, in which you will define file encoding (charset).</p>
<pre class="prettyprint">try (BufferedReader reader = new BufferedReader(new InputStreamReader(<br />		new FileInputStream("file.txt"), "UTF-8"))) {<br />	String line = null;<br />	while ((line = reader.readLine()) != null) {<br />		System.out.println(line);<br />	}<br />} catch (IOException ex) {<br />	ex.printStackTrace();<br />}</pre>
]]>
</description>
<name>
<![CDATA[
How to read text file in Java with user-defined charset
]]>
</name>
<youtubeid>rB9cTLtIchg</youtubeid>
<shortdesc>
<![CDATA[
How to read text file in Java with charset (encoding) UTF-8 using InputStreamReader.
]]>
</shortdesc>
<shortname>how-to-read-text-file-in-java-with-user-defined-charset</shortname>
<publishdate>2012-03-29T07:29:00</publishdate>
<length>152</length>
<keywords>java
eclipse
java text file
java streams
java streams tutorial
java file io
java file reader
java file input output
java file tutorial
java file
inputstreamreader
filereader
findbugs
java ioexception
java 7
utf-8
charset
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to set column unique using Hibernate (JPA). This will cause ConstraintViolationException trying to insert non-unique username.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 39: Hibernate unique column
]]>
</name>
<youtubeid>Vz9k7jYtMv8</youtubeid>
<shortdesc>
<![CDATA[
How to set column unique using Hibernate (JPA). This will cause ConstraintViolationException trying to insert non-unique username.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-39-hibernate-unique-column</shortname>
<publishdate>2014-04-23T18:46:05</publishdate>
<length>145</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Hibernate (Software)
Java Persistence API (Software)
Web Application (Industry)
framework spring
spring framework
unique
sql
SQL (Programming Language)
java blog aggregator
aggregator
constraint violation exception
constraint
exception</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p>Properties files are in this format: key = value, where each key is on one line. You can easily read properties from some file using object of type Propeties, but first you must open a stream. Next create instance of class Properties and load properties from file. After that you can easily get properties using method getProperty(key) and the result will be value from properties file.</p>
<pre class="prettyprint" style="text-align: left;"><span style="font-family: 'courier new', courier; font-size: small;">try (FileReader reader = new FileReader("db.properties")) {
	Properties properties = new Properties();
	properties.load(reader);
	String url = properties.getProperty("db.url");
	System.out.println(url);
} catch (IOException e) {
	e.printStackTrace();
}</span></pre>
<pre class="prettyprint" style="text-align: left;">&nbsp;</pre>
]]>
</description>
<name>
<![CDATA[
How to easily read data from properties file in Java
]]>
</name>
<youtubeid>WdT9AsIsYe8</youtubeid>
<shortdesc>
<![CDATA[
How to easily read data from .properties file in Java. 
]]>
</shortdesc>
<shortname>how-to-easily-read-data-from-properties-file-in-java</shortname>
<publishdate>2012-03-29T07:46:54</publishdate>
<length>157</length>
<keywords>java
eclipse
java properties
java properties file
howto
tutorial
video
properties</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create custom validation annotation with Hibernate Validator (Beans Validation) and Framework Spring. How to create a unique username validator.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 40: Custom Validation Annotation
]]>
</name>
<youtubeid>rFf0CaxaHVc</youtubeid>
<shortdesc>
<![CDATA[
How to create custom validation annotation with Hibernate Validator (Beans Validation) and Framework Spring. How to create a unique username validator.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-40-custom-validation-annotation</shortname>
<publishdate>2014-04-23T18:47:19</publishdate>
<length>444</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
annotation
validation
hibernate validator
Hibernate (Software)
Java Persistence API (Software)
framework spring
spring framework
beans validation
Web Application (Industry)
unique username</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use custom validation where business rules are defined on the server with JQuery Validation Plugin. Also how to customize messages used in JQuery Validation Plugin.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 41: JQuery Validation Plugin Remote
]]>
</name>
<youtubeid>aRhDGKEtLp8</youtubeid>
<shortdesc>
<![CDATA[
How to use custom validation where business rules are defined on the server with JQuery Validation Plugin. Also how to customize messages used in JQuery Validation Plugin.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-41-jquery-validation-plugin-remote</shortname>
<publishdate>2014-04-23T18:48:30</publishdate>
<length>427</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
JQuery (Software)
Web Application (Industry)
response body
spring web mvc
framework spring
spring framework
jquery validation plugin
beans validation</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to generate JAXB classes in Eclipse. Generating JAXB classes from RSS XSD (XML Schema).</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 42: Generating JAXB classes
]]>
</name>
<youtubeid>5ehIDsfmwtU</youtubeid>
<shortdesc>
<![CDATA[
How to generate JAXB classes in Eclipse. Generating JAXB classes from RSS XSD (XML Schema).
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-42-generating-jaxb-classes</shortname>
<publishdate>2014-04-23T18:49:30</publishdate>
<length>181</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
java blog aggregator
aggregator
jaxb
generate
classes
web application
XML Schema (Data Structure)
RSS (File Format)</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to unmarshall XML file using JAXB. Unmarshalling RSS XML file.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 43: Unmarshalling XML file
]]>
</name>
<youtubeid>T3Ezfup-uLs</youtubeid>
<shortdesc>
<![CDATA[
How to unmarshall XML file using JAXB. Unmarshalling RSS XML file.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-43-unmarshalling-xml-file</shortname>
<publishdate>2014-04-23T18:51:01</publishdate>
<length>489</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
unmarshall
xml
jaxb
web application
java blog aggregator
aggregator
RSS (File Format)</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>From previous screencast I have two files: sitemap.xml, which I want to read and sitemap.xsd, which describes format of sitemap.xml<br /><br />First I will create a new JAXB project. <br /><br />You must have Eclipse for Java EE developers, because it contains plugin Web Tools Platform (WTP), that has support for JAXB. If you don't have Eclipse for Java EE developers, you can download it separatelly or install plugin WTP to your Eclipse.<br /><br />Be sure to have associated a JDK with your project, not simple JRE, because JAXB uses for class generation an application xjc.exe, which is only in JDK, so without associated JDK it won't work.<br /><br />In Java EE perspective notice this "JAXB Context". <br /><br />Now right click your project, choose other and select "JAXB Classes from Schema". Select sitemap.xsd and specify package where will be generated classes. This will generate several classes such as Urlset and TUrl. If you go to sitemap.xsd, you can notice that these classes are also defined here. In classes notice that class Urlset is annotated with annotation @XmlRootElement and class TUrl is annotated with annotation @XmlType.</p>
]]>
</description>
<name>
<![CDATA[
JAXB tutorial part 2: generating classes from XML schema
]]>
</name>
<youtubeid>kOLziP28598</youtubeid>
<shortdesc>
<![CDATA[
How to generate JAXB classes from XML Schema (XSD) in Eclipse. 
]]>
</shortdesc>
<shortname>jaxb-generating-classes</shortname>
<publishdate>2012-04-29T15:34:24</publishdate>
<length>281</length>
<keywords>java
eclipse
jaxb
xml
xsd
marshalling
unmarshalling
marshal
unmarshal
sitemap
xml binding
sitemap.xml
howto
tutorial
xml schema
xjc
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create JUnit Test Case, add JUnit libraries to classpath with Maven and write tests.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 44: JUnit Test Case
]]>
</name>
<youtubeid>AwdsWWNt3YE</youtubeid>
<shortdesc>
<![CDATA[
How to create JUnit Test Case, add JUnit libraries to classpath with Maven and write tests.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-44-junit-test-case</shortname>
<publishdate>2014-04-23T18:55:54</publishdate>
<length>582</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
JUnit (Software)
web application
test
test case
maven
java blog aggregator
aggregator
classpath</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p style="text-align: left;">How to write something into a text file? The most generic way is by using streams. There are character and binary streams. Character streams extend classes Reader or Writer. Reader reads some data, writer writes some data. Binary streams extend classes InputStream or OutputStream. InputStream reads some data, OutputStream writes some data. In practice, you don't use these generic classes, but the descendants. Furthermore each stream is as easy as it gets, so you are forced to combine them together.<br /><br />For example FileReader reads characters from some file, but it cannot read the whole line. BufferedReader can do that (and more). So if you combine them, you can read a file one line at a time. FileWriter can write characters into some file, but you would have to put a line separator into a file yourself. BufferedWriter has a method newLine() which writes line separator into a file.<br /><br /></p>
<pre class="prettyprint">FileReader fileReader = new FileReader("file.txt");<br />BufferedReader reader = new BufferedReader(fileReader);<br />String line = null;<br />while ((line = reader.readLine()) != null) {<br />System.out.println(line);<br />}<br />reader.close();</pre>
]]>
</description>
<name>
<![CDATA[
Java Streams 101, how to read text file
]]>
</name>
<youtubeid>2FNNjEngSKE</youtubeid>
<shortdesc>
<![CDATA[
Java Streams tutorial, how to read text file using BufferedReader and FileReader in Java
]]>
</shortdesc>
<shortname>java-streams-101-how-to-read-text-file</shortname>
<publishdate>2012-03-29T05:50:31</publishdate>
<length>288</length>
<keywords>java
eclipse
java text file
java streams
java streams tutorial
java file io
java file reader
java file input output
java file tutorial
java file
bufferedreader
filereader
video</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p>This way you can read a file from your harddrive in Java. But how to read a file from classpath? Which means from current JAR or WAR or any other JAR this application uses. You must open your file using:</p>
<pre class="prettyprint">InputStreamReader inputReader <br />        = new InputStreamReader(Main.class.getClass()<br />             .getResourceAsStream("/log4j.properties")); </pre>
<pre class="prettyprint">&nbsp;</pre>
<p>If your file is inside some package, use slash do delimit packages. This method returns InputStream. If you want to open a text file, convert it to reader using InputStreamReader.</p>
]]>
</description>
<name>
<![CDATA[
How to read file from JAR file (classpath)
]]>
</name>
<youtubeid>2hqi64GwUm4</youtubeid>
<shortdesc>
<![CDATA[
But how to read a file from classpath? Open it with getResourceAsStream method and if you want to read text file, use InputStreamReader for conversion to Reader.
]]>
</shortdesc>
<shortname>how-to-read-file-from-jar-file-classpath</shortname>
<publishdate>2013-01-09T22:47:26</publishdate>
<length>153</length>
<keywords>getResourceAsStream
InputStreamReader
classpath
jar
read file
java
howto
tutorial
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Saving items from RSS XML file to database.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 45: Save items 
]]>
</name>
<youtubeid>zRJSoPyKE48</youtubeid>
<shortdesc>
<![CDATA[
Saving items from RSS XML file to database.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-45-save-items</shortname>
<publishdate>2014-04-23T18:57:09</publishdate>
<length>364</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
RSS (File Format)
xml
Hibernate (Software)
Java Persistence API (Software)
spring data jpa
database</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to set set column to CLOB (Character Large OBject) with Hibernate (JPA) using StringClobType. Presented on PostgreSQL and HSQL database.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 46: CLOB
]]>
</name>
<youtubeid>3BXfz5_KYt4</youtubeid>
<shortdesc>
<![CDATA[
How to set set column to CLOB (Character Large OBject) with Hibernate (JPA) using StringClobType.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-46-clob</shortname>
<publishdate>2014-04-23T18:58:15</publishdate>
<length>255</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Character Large Object
clob
stringclobtype
Hibernate (Software)
Java Persistence API (Software)
web application
PostgreSQL (Software)
hsql
database</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Scheduling using Spring framework with annotation @Scheduled.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 47: Scheduling 
]]>
</name>
<youtubeid>vk0qZt98o-k</youtubeid>
<shortdesc>
<![CDATA[
Scheduling using Spring framework with annotation @Scheduled.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-47-scheduling</shortname>
<publishdate>2014-04-23T18:59:26</publishdate>
<length>207</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
scheduling
scheduled
framework spring
spring framework
annotation
web application
java blog aggregator
aggregator</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Creating Java blog aggregator homepage with items from database ordered by published date in descending order.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 48: Java blog aggregator homepage
]]>
</name>
<youtubeid>cAcRKcTVPPQ</youtubeid>
<shortdesc>
<![CDATA[
Creating Java blog aggregator homepage with items from database ordered by published date in descending order.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-48-java-blog-aggregator-homepage</shortname>
<publishdate>2014-04-23T19:00:37</publishdate>
<length>358</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
java blog aggregator
homepage
web application
aggregator
spring web mvc
framework spring
spring framework
RSS (File Format)</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>In Data Source Explorer you have databases, which you associated with Eclipse. You can access this view in Database Development perspective.<br /><br />You can easily show tables, it's structure and contents. You can also open SQL scrapbook, where you can write SQL commands. To execute a command press Ctrl + Alt + X.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse Data Source Explorer explained
]]>
</name>
<youtubeid>ugtrxsoRz0I</youtubeid>
<shortdesc>
<![CDATA[
Eclipse Data Source Explorer explained. Display contents of your tables and execute your own SQL commands. Presented on MySQL database.
]]>
</shortdesc>
<shortname>eclipse-data-source-explorer-explained</shortname>
<publishdate>2012-05-01T23:39:41</publishdate>
<length>170</length>
<keywords>java
eclipse
howto
tutorial
jdbc driver
database connection
data source explorer
jdbc
database perspective
eclipse database tutorial
eclipse mysql connection
mysql
java eclipse mysql
mysql java eclipse
jdbc mysql eclipse
video</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>Often you want to work with XML files in Java. You can do this using DOM, SAX or XML binding. Now I will show you how to use XML binding. <br /><br />In this technology there's explored one notion - like objects are instances of classes, XML files are instances of XSD files (also known as XML Schema files). If you have a XSD file, you can automatically generate classes. These classes will be annotated with annotations from JAXB library, which is part of JRE. Next you can marshall your objects to xml files or unmarshall data from XML to objects. This is called XML binding.<br /><br />Btw. if you have a XML file you want to work with and don't have a XSD file, don't despair. There are ways to almost automatically construct XSD file from your XML file (for example Rinzo plugin for Eclipse). Also you can work with JAXB the other way around - you can construct classes with annotations and next you can generate XSD from these classes.<br /><br />Now I'd like to show you how to parse one XML file, that has a well-known format: sitemap file. In this file there's tag &lt;urlset&gt;, where are URLs of current website (in tag &lt;url&gt;). Each URL has tag &lt;loc&gt;, which is a hyperlink.<br /><br />I would like to get all URLs from this sitemap. First I will save this sitemap. Next we need a XSD file. Google "sitemap xsd" and save it. If your browser saved it as sitemap.xsd.xml, delete "dot xml".<br /><br />In the next screencast I will show you how to work with JAXB in Eclipse.</p>
]]>
</description>
<name>
<![CDATA[
JAXB tutorial part 1: XML Binding explained
]]>
</name>
<youtubeid>4J_ytgQ96Kg</youtubeid>
<shortdesc>
<![CDATA[
XML Binding basics explained: JAXB, XML, XSD, marshalling and unmarshalling. Introduction to sitemap.xml file.
]]>
</shortdesc>
<shortname>jaxb-xml-binding</shortname>
<publishdate>2012-04-29T12:19:12</publishdate>
<length>240</length>
<keywords>java
eclipse
jaxb
xml
xsd
marshalling
unmarshalling
marshal
unmarshal
sitemap
xml binding
sitemap.xml
howto
tutorial
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>If you want to access your database in Eclipse, you must have 3 things:<br /><br /></p>
<ol>
<li>Database</li>
<li>Eclipse for Java EE developers (or installed plugin Web Tools Platform for other Eclipse version)</li>
<li>JDBC driver</li>
</ol>
<p><br />I have installed on localhost MySQL database. Database name is jerry and user that can connect to this database has username jerry as well. Now I'd like to connect to this database in Eclipse. For this switch to Database development perspective and follow my instructions.</p>
]]>
</description>
<name>
<![CDATA[
Database connection in Eclipse (MySQL)
]]>
</name>
<youtubeid>kIVvIJfQQAs</youtubeid>
<shortdesc>
<![CDATA[
How to add database connection in Eclipse. This example is presented on MySQL database.
]]>
</shortdesc>
<shortname>database-connection-in-eclipse</shortname>
<publishdate>2012-05-01T22:05:28</publishdate>
<length>302</length>
<keywords>java
eclipse
howto
tutorial
jdbc driver
database connection
data source explorer
jdbc
database perspective
eclipse database tutorial
mysql connection java
mysql java eclipse
mysql java
mysql eclipse
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>What is a JDBC driver? It is a driver for accessing a database in Java. How to get one? Just google name of your database and JDBC. For example to get JDBC driver for MySQL database google "mysql jdbc". For Oracle "oracle jdbc". For postgresql "postgresql jdbc".</p>
<p><br />Be sure to download correct JDBC driver for your database. For MySQL database you should usually download latest version. It is also best practice to always consult documentation. Oracle and postgresql has different JDBC driver for each version.</p>
]]>
</description>
<name>
<![CDATA[
JDBC driver 101
]]>
</name>
<youtubeid>17bdLbIaRhc</youtubeid>
<shortdesc>
<![CDATA[
How to download a JDBC driver for your database.
]]>
</shortdesc>
<shortname>jdbc-driver-101</shortname>
<publishdate>2012-05-01T19:22:36</publishdate>
<length>189</length>
<keywords>jdbc
driver
jdbc driver
java
eclipse
jdbc mysql
jdbc oracle
jdbc postgresql
jdbc tutorial
tutorial
howto
video</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>JUnit and Maven, how to skip tests</p>
<p>&nbsp;</p>
<p>Add inside pom.xml this dependency:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;dependency&gt;<br />&lt;groupId&gt;junit&lt;/groupId&gt;<br />&lt;artifactId&gt;junit&lt;/artifactId&gt;<br />&lt;version&gt;4.11&lt;/version&gt;<br />&lt;scope&gt;test&lt;/scope&gt;<br />&lt;/dependency&gt;</pre>
<p>&nbsp;</p>
<p>This dependency will have scope "test", which means, that it won't be packaged and will be available only during test phase.</p>
<p>&nbsp;</p>
<p>And you are done. Now you can create your JUnit tests.</p>
<p>&nbsp;</p>
<p>Create them inside src/test/java, so that they are separated from your classes. Inside src/test/resources should be non-java files like properties, XML files etc., which are used by tests.</p>
<p>&nbsp;</p>
<p>To run tests, run "mvn test" or any other Maven phase that uses this phase like "package".</p>
<p>&nbsp;</p>
<p>If some test fails, you will see BUILD FAILURE message. If you want to see detailed information about each test, see directory target/surefire-reports. There are JUnit test results.</p>
<p>&nbsp;</p>
<p>Beware that all tests are run before packaging your application. If any of them fails, Maven won't package your application. You can skip tests using: -Dmaven.test.skip=true</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
JUnit and Maven in Eclipse
]]>
</name>
<youtubeid>ye1hMZCbYjg</youtubeid>
<shortdesc>
<![CDATA[
How to add JUnit tests to Maven application in Eclipse, where to find JUnit test results and how to skip tests.
]]>
</shortdesc>
<shortname>junit-and-maven-in-eclipse</shortname>
<publishdate>2013-01-09T04:50:31</publishdate>
<length>226</length>
<keywords>junit
maven
howto
tutorial
video
java
eclipse</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>What is an entity? It's a POJO class, that is annotated with @Entity annotation and is mapped to a database table. It must have a default constructor and it's best practice that it should implement Serializable interface.<br /><br />By default the name of the entity is the same as the name of the table in database. If if differs, you must add before class annotation @Table and inside it specify the table name.<br /><br />Table in database has columns. These columns are mapped to attributes in entity. By default the name of the attribute is the same as the name of the column in database table. If it differs, you must add before attribute annotation @Column and inside it specify the column name.<br /><br />If you have an attribute that isn't mapped to a table column, add before such attribute annotation @Transient.<br /><br />Attributes must have getters and setters.</p>
]]>
</description>
<name>
<![CDATA[
JPA (EclipseLink, Hibernate) entity explained.
]]>
</name>
<youtubeid>3bv96fOY2Hc</youtubeid>
<shortdesc>
<![CDATA[
JPA (EclipseLink, Hibernate) entity explained. Mapping table to an entity and table column to an attribute.
]]>
</shortdesc>
<shortname>jpa-eclipselink-hibernate-entity-explained</shortname>
<publishdate>2012-05-08T16:40:45</publishdate>
<length>153</length>
<keywords>java
eclipse
tutorial
howto
jpa
jpa 2.0
hibernate
eclipselink
table
column
entity
attribute
pojo
transient
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>If you want to use EclipseLink with Maven, do the following:<br /><br />Create a new Maven project and skip archetype selection. Google "eclipselink maven" and there you will find that you need eclipselink library and javax.persistence library. Add Eclipselink repository. Add following dependencies: eclipselink, javax.persistence and your JDBC driver.<br /><br />Select project properties, Project Facets, choose JPA and edit JPA configuration: Select your EclipseLink version, disable library configuration and select your database connection in Eclipse. This will create META-INF/persistence.xml file. Goto Connection tab, choose transaction type "Resource Local" and populate configuration from your Eclipse connection.<br /><br />Now you have your project fully configured for work with JPA.</p>
]]>
</description>
<name>
<![CDATA[
Creating a JPA project with EclipseLink and Maven
]]>
</name>
<youtubeid>UQJKkqqiVDo</youtubeid>
<shortdesc>
<![CDATA[
How to create a JPA project in Eclipse with EclipseLink library using Maven. EclipseLink is JPA 2.0 implementation. Presented on MySQL database.
]]>
</shortdesc>
<shortname>creating-a-jpa-project-with-eclipselink-and-maven</shortname>
<publishdate>2012-05-02T11:08:31</publishdate>
<length>302</length>
<keywords>java
eclipse
installation
install
plugin
howto
tutorial
jpa
java persistence api
mysql
jdbc
eclipselink
eclipselink tutorial
jpa 2.0
jpa 2.0 tutorial
maven
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>First you must have fully configured JPA project. It doesn't matter if you downloaded libraries and associated them with your project or if you used Maven. It even doesn't matter which implementation of JPA specification you have, be it Eclipselink, Hibernate or something else entirely.<br /><br />Next you must create entities. They are Java classes, that are mapped to database tables. Usually they are very similar to database tables and with Eclipse I can generate them. To do that right click and choose "JPA Entities from Tables", select tables, click Next. Here are associations between tables, click Next, here you can choose how to generate primary keys and set package where will be generated classes. Click Finish.<br /><br />To retrieve some data from database create a Main class and type:<br /><br /> EntityManager entityManager = Persistence.createEntityManagerFactory(<br /> "testJpaEclipselink").createEntityManager();<br /> List&lt;Customer&gt; list = entityManager.createQuery("select c from Customer c", Customer.class)<br /> .getResultList();<br /> for (Customer customer : list) {<br /> System.out.println(customer.getName());<br /> }</p>
]]>
</description>
<name>
<![CDATA[
JPA 2.0 (Hibernate, Eclipselink) hello world
]]>
</name>
<youtubeid>R7B5T3H2I5A</youtubeid>
<shortdesc>
<![CDATA[
JPA 2.0 (Hibernate, Eclipselink) hello world. How to generate entities and using EntityManager read some data. Presented on MySQL database. 
]]>
</shortdesc>
<shortname>jpa-20-hibernate-eclipselink-hello-world</shortname>
<publishdate>2012-05-02T12:41:51</publishdate>
<length>302</length>
<keywords>java
eclipse
installation
install
plugin
howto
tutorial
jpa
java persistence api
mysql
jdbc
eclipselink
eclipselink tutorial
jpa 2.0
jpa 2.0 tutorial
hibernate
hibernate tutorial
entity
jpa entity
hello world
entitymanager
persistence
jpql
query
video</keywords>
</item>
<item>
<groupshortname>java-basics</groupshortname>
<description>
<![CDATA[
<p>How do you get a current date? Using new Date(); Date is from package java.util.</p>
<pre class="prettyprint">Date currentDate = new Date();<br />System.out.println("current date: " + currentDate);</pre>
<p>&nbsp;</p>
<p>How do you get a current day? You could use getDay() method, but this method was deprecated long time ago and nowadays you should use Calendar:</p>
<pre class="prettyprint">GregorianCalendar calendar = new GregorianCalendar();<br />// for current date you don't have to set time<br />calendar.setTime(currentDate);<br />System.out.println("current day: " + calendar.get(Calendar.DATE));</pre>
<p>&nbsp;</p>
<p>How to get the next day? Using Calendar:</p>
<pre class="prettyprint">calendar.add(Calendar.DATE, 1);<br />System.out.println("next day: " + calendar.get(Calendar.DATE));</pre>
<p>In Calendar class are lots of methods, see Javadoc.</p>
<p>&nbsp;</p>
<p>Often you want to convert a date object to String using some pattern. Use class SimpleDateFormat. See Javadoc for patterns:</p>
<pre class="prettyprint">String txtDate = new SimpleDateFormat("dd/MM/yyyy").format(currentDate);<br />System.out.println("current date: " + txtDate);</pre>
<p>And of course you can convert a String to date object:</p>
<pre class="prettyprint">Date firstJanuary = new SimpleDateFormat("dd/MM/yyyy").parse("01/01/2013");<br />System.out.println("first january: " + firstJanuary);</pre>
]]>
</description>
<name>
<![CDATA[
Using Date, Calendar and SimpleDateFormat in Java
]]>
</name>
<youtubeid>vg-Y9fb93xc</youtubeid>
<shortdesc>
<![CDATA[
How to get current date, how to get current day from date, how to get next day, Gregorian Calendar class, Simple date format class, parsing Date, converting Date to String.
]]>
</shortdesc>
<shortname>using-date-calendar-and-simpledateformat-in-java</shortname>
<publishdate>2013-01-07T09:51:28</publishdate>
<length>221</length>
<keywords>simpledateformat
calendar
gregorian calendar
java
date
time
howto
tutorial</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>Since Java Version 7 Update 10, you can disable Java plugin using a single option in the Java Control Panel.</p>
<p>First let's test if Java works. Goto http://java.com and click on this link "Do I have Java?" and Verify Java version. If you see something like this, then you have Java plugin enabled.</p>
<p>How to disable it?</p>
<p>Open Control Panel, search for Java, select Security -&gt; Enable Java content in the browser.</p>
<p>Now go back into java.com and see if Java works and now you should see that Java is not working, so you successfully disabled it.</p>
]]>
</description>
<name>
<![CDATA[
How to disable Java in all web browsers
]]>
</name>
<youtubeid>Arkz68Ie8Bg</youtubeid>
<shortdesc>
<![CDATA[
Since Java Version 7 Update 10, you can disable Java plugin using a single option in the Java Control Panel.
]]>
</shortdesc>
<shortname>how-to-disable-java-in-all-web-browsers</shortname>
<publishdate>2013-01-13T12:58:35</publishdate>
<length>88</length>
<keywords>java
tutorial
howto
disable java plugin
disable
java 7
internet explorer
google chrome
firefox
opera
safari</keywords>
</item>
<item>
<groupshortname>java-misc</groupshortname>
<description>
<![CDATA[
<p>First let's test if Java works. Goto http://java.com and click on this link "Do I have Java?" and Verify Java version. If you see something like this, then you have Java plugin enabled.</p>
<p>How to disable it?</p>
<p>Goto Firefox -&gt; Add-ons -&gt; Plugins -&gt; Java(TM) Platform plugin and select to disable it.</p>
<p>Now go back into java.com and see if Java works and now you should see that Java is not working, so you successfully disabled it.</p>
]]>
</description>
<name>
<![CDATA[
How to disable Java in Firefox
]]>
</name>
<youtubeid>D1ks1nIInbw</youtubeid>
<shortdesc>
<![CDATA[
How to disable Java plugin in Firefox.
]]>
</shortdesc>
<shortname>how-to-disable-java-in-firefox</shortname>
<publishdate>2013-01-13T10:26:49</publishdate>
<length>70</length>
<keywords>java
tutorial
howto
disable java plugin
disable
firefox</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>In database you can have binary and character large objects (BLOB, CLOB). For example BLOBs can be used to store images or Microsoft documents (Word, Excel) and CLOBs can be used to store XML files. Both are mapped in your entity using @Lob annotation. Binary large object is mapped to an array of bytes, character large object is mapped to an array of chars or a String.</p>
<p><br />Usually you don't want to always retrieve these large objects from database. For this you can annotate them with @Basic annotation: @Basic(fetch=FetchType.LAZY).</p>
<p>¬†</p>
<p>Now I will show you typical usage of BLOB. I added to a CUSTOMERS table column ICON which is a BLOB and inside I put JPEG images of customers. Now in my web application I want to retrieve these data and show name and these images. To do so I created a class CustomerService where are two methods: list(), which loads all customers and loadImage() to retrieve an image of a selected customer.</p>
<p><br />Next I created two servlets. I could do this using Spring Web MVC, but for people that don't know Spring, I used servlets. CustomerServlet retrieves a list of customers and forwards to JSP file to display their information. CustomerImageServlet loads an image and sends it to client in binary form. Finally JSP file iterates all customers from CustomerServlet and uses img tag to load and show image of each customer.</p>
]]>
</description>
<name>
<![CDATA[
How to read data from BLOB using JPA (Hibernate)
]]>
</name>
<youtubeid>5409RusitSU</youtubeid>
<shortdesc>
<![CDATA[
How to read data from BLOB or CLOB using JPA (Hibernate) with annotation @Lob and @Basic. Presented on web application which loads images from MySQL database using Servlets.
]]>
</shortdesc>
<shortname>how-to-read-data-from-blob-using-jpa-hibernate</shortname>
<publishdate>2012-05-26T10:12:40</publishdate>
<length>242</length>
<keywords>java
eclipse
tutorial
howto
jpa
jpa 2.0
hibernate
eclipselink
toplink
jpa entity
entity
mysql
blob
clob
mysql blob
servlet
jsp
lob
video</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p>How to handle exceptions? It would be really bad if you didn't close the files properly. Such situation can easily happen in this code. I will now show you how to properly structure this method. Be aware that this is pre-Java 7 style. Since Java 7 you can do that in a much easier way.</p>
<pre class="prettyprint">BufferedReader reader = null;<br />try {<br />	reader = new BufferedReader(new FileReader("file.txt"));<br />	String line = null;<br />	while ((line = reader.readLine()) != null) {<br />		System.out.println(line);<br />	}<br />} catch (IOException ex) {<br />	ex.printStackTrace();<br />} finally {<br />	if (reader != null) {<br />		try {<br />			reader.close();<br />		} catch (IOException e) {<br />			e.printStackTrace();<br />		}<br />	}<br />}</pre>
]]>
</description>
<name>
<![CDATA[
How to properly structure a method for accessing a file (pre Java 7 style)
]]>
</name>
<youtubeid>6LSL6zhZdNw</youtubeid>
<shortdesc>
<![CDATA[
How to properly structure a method for accessing a file (pre Java 7 style) using try-catch-finally block.
]]>
</shortdesc>
<shortname>how-to-properly-structure-a-method-for-accessing-a-file-pre-java-7-style</shortname>
<publishdate>2012-03-29T06:34:10</publishdate>
<length>267</length>
<keywords>java
eclipse
java text file
java streams
java streams tutorial
java file io
java file reader
java file input output
java file tutorial
java file
bufferedreader
filereader
findbugs
java ioexception
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>@Id annotation marks your primary key. It is usually Integer or int, but it can be anything else. It's type must correspond to the type of the column in your table. If you want to persist some data to database, you must somehow generate this primary key. If you don't specify anything, you must do it on your own.<br /><br />Or you can use annotation @GeneratedValue and let something else for you to generate your primary key. You can set it's atribute strategy to these values:</p>
<ul>
<li><strong>AUTO</strong>: Using this value it's up to your JPA implementation to generate this primary key. I seldom use this, I'd like to have primary key generation fully under my control.</li>
<li><strong>IDENTITY</strong>: Some databases like MySQL are able to autoincrement a value of a primary key upon SQL INSERT. For MySQL use this strategy.</li>
<li><strong>SEQUENCE</strong>: Most databases have sequences, so you can use them. If you want to use sequences, you must name a generator. This generator is defined using annotation @SequenceGenerator.</li>
<li><strong>TABLE</strong>: If you cannot use sequences, you can use a table to be something like a sequence. Again you must define a generator, this time table generator using annotation @TableGenerator. I don't use this strategy, because nowadays every popular database has sequences.</li>
</ul>
]]>
</description>
<name>
<![CDATA[
Primary key generation in JPA
]]>
</name>
<youtubeid>TzSwhW5Dk1Q</youtubeid>
<shortdesc>
<![CDATA[
How to generate a primary key in JPA (Hibernate, Eclipselink, Toplink). IDENTITY, SEQUENCE and other strategies (AUTO, TABLE) explained. 
]]>
</shortdesc>
<shortname>primary-key-generation-in-jpa</shortname>
<publishdate>2012-05-12T08:32:37</publishdate>
<length>257</length>
<keywords>java
eclipse
tutorial
howto
jpa
jpa 2.0
hibernate
eclipselink
toplink
identity
sequence generator
table generator
auto
generated value
jpa entity
entity
mysql
primary key
id
video</keywords>
</item>
<item>
<groupshortname>logging</groupshortname>
<description>
<![CDATA[
<p>How to start logging in Maven application? The technique is the same in Java SE and Java EE applications. Goto pom.xml and add these dependencies:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;dependency&gt;<br />  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;<br />  &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;<br />  &lt;version&gt;1.7.2&lt;/version&gt;<br />&lt;/dependency&gt;<br />&lt;dependency&gt;<br />  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;<br />  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;<br />  &lt;version&gt;1.7.2&lt;/version&gt;<br />&lt;/dependency&gt;</pre>
<p>&nbsp;</p>
<p>Next add to classpath log4j.properties file.</p>
<p>&nbsp;</p>
<p>Inside class you want to do logging add this attribute:</p>
<p>&nbsp;</p>
<pre class="prettyprint">private static final Logger logger = LoggerFactory.getLogger(Main.class);</pre>
<p>&nbsp;</p>
<p>And then simply call logger methods.</p>
]]>
</description>
<name>
<![CDATA[
Logging using slf4j, log4j in Maven application
]]>
</name>
<youtubeid>tacyRereiQI</youtubeid>
<shortdesc>
<![CDATA[
How to start logging in Maven application? How to add required dependencies?
]]>
</shortdesc>
<shortname>logging-using-slf4j-log4j-in-maven-application</shortname>
<publishdate>2013-05-03T07:31:14</publishdate>
<length>138</length>
<keywords>java
eclipse
howto
tutorial
maven
log4j
slf4j
logging
logger
dependency</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Twitter Bootstrap to make our application pretty :-) I will use Twitter Bootstrap and JQuery from CDN (Content Delivery Network). Our web application will have responsive layout (useful for mobile devices).</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 5: Twitter Bootstrap
]]>
</name>
<youtubeid>fBLpz0e7N0k</youtubeid>
<shortdesc>
<![CDATA[
How to use Twitter Bootstrap to make our application pretty :-) I will use Twitter Bootstrap and JQuery from CDN (Content Delivery Network). Our web application will have responsive layout (useful for mobile devices).
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-5-twitter-bootstrap</shortname>
<publishdate>2014-04-23T16:11:58</publishdate>
<length>370</length>
<keywords>jquery
training
git
howto
aggregator
eclipse
Twitter Bootstrap (Software)
java blog aggregator
spring
tutorial
java
Responsive Web Design (Industry)
javavids
web application
cdn
basics
spring framework
github
heroku</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>If you want to install JBoss Tools plugin (or some part of it like Hibernate Tools), just google "jboss tools download" and you will get to this site: http://www.jboss.org/tools/download On this web site there are stable releases, development milestones and nightly builds. Most users want to download either stable releases or development milestones. <br /><br />Just be sure to download right version for your Eclipse IDE. Currently latest Eclipse version is Indigo, which is 3.7. In order to install these plugins, drag and drop this install button to your Eclipse somewhere up here. This will trigger installation process.</p>
]]>
</description>
<name>
<![CDATA[
JBoss Tools (Hibernate tools) installation
]]>
</name>
<youtubeid>AtRstkliJ48</youtubeid>
<shortdesc>
<![CDATA[
JBoss Tools (Hibernate tools) Eclipse plugin installation.
]]>
</shortdesc>
<shortname>jboss-tools-hibernate-tools-installation</shortname>
<publishdate>2012-05-02T08:17:45</publishdate>
<length>173</length>
<keywords>jboss tools
hibernate tools
java
eclipse
installation
install
plugin
howto
tutorial
jpa
java persistence api
mysql
jdbc
jpa 2.0
jpa 2.0 tutorial
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>First you must download Hibernate libraries. I already done that and unzipped them. Next create your own User library in Eclipse and put inside jars in folders "jpa" and "required". Also create library with your JDBC driver. It is unnecessary in this step, but we'll need it later. You must also have active database connection.<br /><br />Next create a new JPA project, choose your JRE, choose Hibernate, add library with Hibernate and your JDBC library and select your database connection. This created file persistence.xml in META-INF directory.<br /><br />Notice that you won't see connection properties inside this file. By default JPA depends on JTA. We don't have that right now, so choose Connection tab, change Transaction type to "Resource Local" and set connection properties using alredy defined connection to database in Eclipse.<br /><br />Now you are ready to work with JPA using Hibernate.</p>
]]>
</description>
<name>
<![CDATA[
How to create a Hibernate project in Eclipse
]]>
</name>
<youtubeid>ehtR1ghumkY</youtubeid>
<shortdesc>
<![CDATA[
How to create a Hibernate project in Eclipse using Hibernate Tools (part of JBoss Tools)  Presented on MySQL database.
]]>
</shortdesc>
<shortname>how-to-create-a-hibernate-project-in-eclipse</shortname>
<publishdate>2012-06-03T11:18:46</publishdate>
<length>213</length>
<keywords>java
eclipse
installation
install
plugin
howto
tutorial
jpa
java persistence api
mysql
jdbc
jpa 2.0
jpa 2.0 tutorial
hibernate
hibernate tutorial
entity
jpa entity
hello world
entitymanager
persistence
jpql
query
jpa tutorial
eclipse jpa tutorial
hibernate jpa tutorial
video</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>When you create a Hibernate project, you will also create a Hibernate console. It is a tool for testing your Hibernate configuration and executing HQL and criteria queries. Btw this tool works also with JPA projects based on EclipseLink, TopLink and other JPA implementations. And you can execute not only HQL, but also JPQL. <br /><br />In hello world projects basic configuration usually works fine, but once you start modifying your configuration, your Hibernate console may not work because by default it depends on connection defined in your project configuration. To change that choose "Edit Configuration", select which type of project you use, I use JPA, choose Hibernate version and switch Database connection to your defined database connection in Eclipse. <br /><br />If you have more persistence units in persistence.xml file, choose which one will be used. Depending on your version of Hibernate you may also need to choose Database dialect.<br /><br />You can open HQL editor and inside you can write HQL or JPQL query. Next you can run this query. Hibernate Dynamic SQL Preview shows you SQL query which will be executed in your database. You can also add dynamic query parameters.<br /><br />You can also test your Hibernate Criteria Query using Hibernate Criteria Editor and you can also graphically see mapping between your entities and tables in database.</p>
]]>
</description>
<name>
<![CDATA[
Hibernate console configuration and usage
]]>
</name>
<youtubeid>50Hx3N_a9as</youtubeid>
<shortdesc>
<![CDATA[
Hibernate console configuration and usage. Execute HQL, JPQL and Hibernate Criteria query. How to graphically see entities mapping. Presented on MySQL database.
]]>
</shortdesc>
<shortname>hibernate-console-configuration-and-usage</shortname>
<publishdate>2012-06-03T11:24:31</publishdate>
<length>257</length>
<keywords>java
eclipse
installation
install
plugin
howto
tutorial
jpa
hibernate console
mapping
java persistence api
mysql
jdbc
jpa 2.0
jpa 2.0 tutorial
hibernate
hibernate tutorial
entity
jpa entity
persistence
jpql
hql
criteria query
query
jpa tutorial
eclipse jpa tutorial
hibernate jpa tutorial
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to resolve error: The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path? If you use Maven, add to pom.xml Servlet and JSP API with scope provided.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 6: Servlet and JSP API
]]>
</name>
<youtubeid>ErEMwFcPPCk</youtubeid>
<shortdesc>
<![CDATA[
How to resolve error: The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path? If you use Maven, add to pom.xml Servlet and JSP API with scope provided.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-6-servlet-and-jsp-api</shortname>
<publishdate>2014-04-23T16:12:46</publishdate>
<length>96</length>
<keywords>pom.xml
git
java
aggregator
eclipse
error
java blog aggregator
howto
tutorial
maven
javavids
web application
basics
jsp
training
github
servlet
java build path</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Spring root context using ContextLoaderListener and configuration file applicationContext.xml. How to effectively use context:component-scan with context:exclude-filter.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 7: Spring root context
]]>
</name>
<youtubeid>K7C0ipY_RGg</youtubeid>
<shortdesc>
<![CDATA[
How to use Spring root context using ContextLoaderListener and configuration file applicationContext.xml. How to effectively use context:component-scan with context:exclude-filter.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-7-spring-root-context</shortname>
<publishdate>2014-04-23T16:13:47</publishdate>
<length>185</length>
<keywords>application context
training
git
maven
aggregator
eclipse
component scan
java blog aggregator
howto
tutorial
context
java
contextloaderlistener
root
javavids
web application
root context
basics
Spring
github
applicationcontext.xml
heroku</keywords>
</item>
<item>
<groupshortname>junit</groupshortname>
<description>
<![CDATA[
<p>Unit tests are great, but they cover only part of your code. Another interesting category of tests is integration testing. Using integration tests you can test collaboration of objects, methods for accessing database etc.<br /><br />If you use Spring, it's very easy. In Spring you have a Service or Repository like this service class. Now I want to test these methods.<br /><br />First I must add Spring runner using: @RunWith(SpringJUnit4ClassRunner.class). Next I must specify where is XML configuration file on disc using @ContextConfiguration. I also strongly suggest to add @Transactional annotation to your test suite. Thanks to this annotation after each test will be automatically called rollback. You can also call rollback on your own using @Rollback. This test suite is now like a Spring bean, you can use annotation @Autowired to inject Spring beans.</p>
]]>
</description>
<name>
<![CDATA[
JUnit & Spring, integration testing
]]>
</name>
<youtubeid>hS5rzUYoP6o</youtubeid>
<shortdesc>
<![CDATA[
JUnit & Spring, JUnit integration testing example.
]]>
</shortdesc>
<shortname>junit--spring-integration-testing</shortname>
<publishdate>2012-03-28T09:30:21</publishdate>
<length>293</length>
<keywords>spring junit
junit example
junit tutorial
junit eclipse
junit framework
junit
spring
test case
integration testing
integration test
java
eclipse
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create WAR file in Eclipse using Maven package.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 49: maven package
]]>
</name>
<youtubeid>G38YxbjCnxE</youtubeid>
<shortdesc>
<![CDATA[
How to create WAR file in Eclipse using Maven package.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-49-maven-package</shortname>
<publishdate>2014-04-24T13:25:58</publishdate>
<length>47</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
WAR File Format (File Format)
maven
web application
package
Eclipse (Software)
java blog aggregator
aggregator
heroku</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>If you want to use Hibernate with Maven, do the following:<br /><br />Create a new Maven project and skip archetype selection. Add following dependencies: hibernate-core, hibernate-entitymanager and your JDBC driver.<br /><br />Select project properties, Project Facets, choose JPA and edit JPA configuration: Select Hibernate, disable library configuration and select your database connection in Eclipse. This will create META-INF/persistence.xml file. Goto Connection tab, choose transaction type "Resource Local" and populate configuration from your Eclipse connection.<br /><br />Now you have your project fully configured for work with JPA.</p>
]]>
</description>
<name>
<![CDATA[
JPA project using Hibernate and Maven
]]>
</name>
<youtubeid>XNJ4eLdfsQs</youtubeid>
<shortdesc>
<![CDATA[
How to create a JPA project with Hibernate and Maven in Eclipse. Presented on MySQL database.
]]>
</shortdesc>
<shortname>jpa-project-using-hibernate-and-maven</shortname>
<publishdate>2012-06-03T14:13:36</publishdate>
<length>217</length>
<keywords>java
eclipse
howto
tutorial
jpa
java persistence api
mysql
jdbc
hibernate
hibernate tutorial
jpa 2.0
jpa 2.0 tutorial
maven
jpa tutorial
eclipse jpa tutorial
hibernate eclipse
hibernate maven
video</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to upload your WAR file to Heroku and have your web. application up and running on your custom domain.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 50: Heroku
]]>
</name>
<youtubeid>gkMdNKN2lBU</youtubeid>
<shortdesc>
<![CDATA[
How to upload your WAR file to Heroku and have your web. application up and running on your custom domain.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-50-heroku</shortname>
<publishdate>2014-04-24T13:26:36</publishdate>
<length>355</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Heroku (Organization)
java blog aggregator
aggregator
WAR File Format (File Format)
deploy
web application</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Spring Profiles to distinguish between development and production environment. How to use Heroku PostgreSQL database. This is the last video in "Java blog aggregator" series.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 51: Spring Profiles and PostgreSQL DB
]]>
</name>
<youtubeid>SCblxEBkqEg</youtubeid>
<shortdesc>
<![CDATA[
How to use Spring Profiles to distinguish between development and production environment. How to use Heroku PostgreSQL database. This is the last video in "Java blog aggregator" series.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-51-spring-profiles-postgresql-db</shortname>
<publishdate>2014-04-24T13:27:49</publishdate>
<length>701</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Heroku (Organization)
PostgreSQL (Software)
framework spring
spring framework
database
spring profile
web application
java blog aggregator
aggregator</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>Apache Tomcat is an open source web server and servlet container developed by Apache Software Foundation.</p>
<p>&nbsp;</p>
<p>Tomcat implements the Java Servlet and the Java Server Pages (JSP) specifications from Sun Microsystems (nowadays Oracle) and provides a simple Java web server development.</p>
<p>&nbsp;</p>
<p>Tomcat is not the same as the Apache web server, which is a HTTP web server, although these two servers are frequently used together as part of a server application stack.</p>
<p>&nbsp;</p>
<p>Which version of Apache Tomcat should you use? Each version implements different versions of Servlet and JSP specifications. Tomcat 7 implements 3.0 Servlet specification, which is Java EE 6. Tomcat 6 implements Java EE 5 specification and so on.</p>
<p>&nbsp;</p>
<p>Installation is quick and easy. Just download ZIP file and unzip it somewhere. Then goto bin and run startup.bat. You should see this console window and information that server startup successfully.</p>
<p>&nbsp;</p>
<p>Next open web browser and goto http://localhost:8080. If you see this page, then it means, that your Tomcat installation works successfully.</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat installation
]]>
</name>
<youtubeid>b08O0tGduF4</youtubeid>
<shortdesc>
<![CDATA[
What is Apache Tomcat, Which version of Apache Tomcat should you use, download and installation tips on OS Windows and OS Linux.
]]>
</shortdesc>
<shortname>apache-tomcat-installation</shortname>
<publishdate>2013-01-21T07:36:05</publishdate>
<length>152</length>
<keywords>java
howto
tomcat
apache tomcat
apache tomcat installation
windows
linux
installation
install
apache tomcat download
download
tutorial</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>In bin directory we have several scripts. If you use Windows, you can safely delete all files ending with sh extension. On the other hand if you use Linux, you can safely delete all files ending with bat extension.</p>
<p>&nbsp;</p>
<p>In this directory you will mostly use startup and shutdown scripts. Both files use script with name catalina. Inside is some information about used environment variables.</p>
<p>&nbsp;</p>
<p>Two of them are most important. JAVA_HOME, which must point at your Java Development Kit installation and JAVA_OPTS, where may be parameters used by Java virtual machine. Whole Apache Tomcat is just a Java SE application, so it uses these variables. You can set them inside your operating system, or you can easily set them in catalina file.</p>
<p>&nbsp;</p>
<p>In JAVA_OPTS it's crutial to set maximum heap size and maximum perm gen size for Tomcat because all web applications running on this server share these memory settings.</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat startup / shutdown scripts
]]>
</name>
<youtubeid>n5kLlnsI8LI</youtubeid>
<shortdesc>
<![CDATA[
How to run Apache Tomcat, startup and shutdown scripts. Customization using catalina script, usage of JAVA_HOME and JAVA_OPTS variables. Setting maximum heap size  (Xmx) and maximum perm gen size (XX:MaxPermSize).
]]>
</shortdesc>
<shortname>apache-tomcat-startup-shutdown-scripts</shortname>
<publishdate>2013-01-21T07:39:21</publishdate>
<length>232</length>
<keywords>java
howto
tomcat
apache tomcat
java_home
java_opts
maximum heap size
maximum perm gen size
xmx
xx:maxpermsize
startup
shutdown
catalina
tomcat startup</keywords>
</item>
<item>
<groupshortname>java-files</groupshortname>
<description>
<![CDATA[
<p>Let's create a properties file. Create instance of class Properties.</p>
<pre class="prettyprint">Properties properties = new Properties();</pre>
<p>&nbsp;</p>
<p>Add properties you want.</p>
<pre class="prettyprint">properties.setProperty("project-name", "JavaVids"); </pre>
<p>&nbsp;</p>
<p>Create a new writer.</p>
<pre class="prettyprint">FileWriter writer = new FileWriter("conf.properties"); </pre>
<p>&nbsp;</p>
<p>Store properties to writer. You can also add a comment.</p>
<pre class="prettyprint">properties.store(writer, "Jiri Pinkas"); </pre>
<p>&nbsp;</p>
<p>Close writer.</p>
<pre class="prettyprint">writer.close(); </pre>
<p>&nbsp;</p>
<p>Add throws declaration to ignore exceptions. This is how you do it quick and dirty. To handle exceptions properly change code to this:</p>
<pre class="prettyprint">Properties properties = new Properties();
properties.setProperty("project-name", "JavaVids");
FileWriter writer = null;
try {
	writer = new FileWriter("conf.properties");
	properties.store(writer, "Jiri Pinkas");
} catch (IOException ex) {
	ex.printStackTrace();
} finally {
	if (writer != null) {
		try {
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}</pre>
]]>
</description>
<name>
<![CDATA[
How to create a properties file in Java
]]>
</name>
<youtubeid>7nA_oofQcXI</youtubeid>
<shortdesc>
<![CDATA[
How to create a properties file in Java.
]]>
</shortdesc>
<shortname>how-to-create-a-properties-file-in-java</shortname>
<publishdate>2013-01-05T15:04:17</publishdate>
<length>128</length>
<keywords>java
properties
howto
tutorial</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>In conf directory are Tomcat configuration files. The most important one is server.xml, where is for example defined on which ports this server runs and other server configuration.</p>
<p>&nbsp;</p>
<p>Tomcat applications can use Java EE security, which needs information about users, their passwords and roles. All this is by default in tomcat-users.xml file (you can change this in server.xml). Out of the box for security reasons there are no users and even no roles.</p>
<p>&nbsp;</p>
<p>web.xml file contains default configuration fo all web applications on current Tomcat instance.</p>
<p>&nbsp;</p>
<p>context.xml file will be loaded for each application and can be used for definition of resources.</p>
<p>&nbsp;</p>
<p>First we would like to access Manager application in Tomcat. Access to this application is restricted using Java EE security. If you press Cancel, you will see some explanation. You must go to tomcat-users.xml file and add role with rolename manager-gui and next some user with some password which will have this role.</p>
<p>&nbsp;</p>
<p>Let's do this.</p>
<p>&nbsp;</p>
<p>If you change anything in config files, you must restart whole server, because they are read on startup.</p>
<p>&nbsp;</p>
<p>Now you will be able to access Tomcat Manager application. There you can see list of applications, you can undeploy application from this server, you can deploy an application to this server and do some other stuff.</p>
]]>
</description>
<name>
<![CDATA[
Tomcat configuration files, manager application
]]>
</name>
<youtubeid>GVpz5Otvxdo</youtubeid>
<shortdesc>
<![CDATA[
Tomcat configuration files: server.xml, tomcat-users.xml explained. How to access Tomcat Manager application.
]]>
</shortdesc>
<shortname>tomcat-configuration-files-manager-application</shortname>
<publishdate>2013-01-21T07:42:42</publishdate>
<length>220</length>
<keywords>java
howto
tomcat
apache tomcat
server.xml
tomcat-users.xml
tomcat manager
tomcat administration
tomcat configuration
linux
windows</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>Java web applications are usually packaged to WAR files. WAR is a shortname for Web Application ARchive and physically it's a ZIP archive.&nbsp;</p>
<p>&nbsp;</p>
<p>I don't use default manager application at all, because it does not contain much useful information. There's one Java Web application that can do everything manager does and much more. It's called Psi probe and it's a fork of Lambda probe if you ever heard about it.</p>
<p>&nbsp;</p>
<p>If you download it, you will download a WAR file. As I said inside is whole web application. Now where to put it? You can either use manager to deploy this WAR file to server, or you can simply copy this file into webapps directory. If you Tomcat is running, it will unpack this file and deploy it on this server. To undeploy it all you have to do is to delete this WAR file and Tomcat will trigger undeploy process.</p>
<p>&nbsp;</p>
<p>How do you access this application? Simply goto http://localhost:8080/probe and you will see this web application. You can login using same credentials you used in manager application. Inside you can see deployed applications and much, much more. One of the sweet stuff is inside System Information -&gt; Memory utilization, where you can see how much memory your tomcat currently uses.</p>
<p>&nbsp;</p>
<p>Now you see that all directories inside webapps are web applications. Inside docs is current Tomcat documentation, inside examples are some examples, but don't bother with them, most of them are outdated. Inside manager is Manager application and finally host-manager is not very much useful. You can also delete them, this way you will undeploy them.</p>
<p>&nbsp;</p>
<p>One application is named ROOT. This application will be presented to the user if he does not go to any particular application.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Deploying applications on Tomcat, Psi probe
]]>
</name>
<youtubeid>oEKTDG8mcfg</youtubeid>
<shortdesc>
<![CDATA[
How to deploy / undeploy / redeploy Java web application on running instance of Apache Tomcat. Installation of Psi probe (former Lambda probe) web application for monitoring and management.
]]>
</shortdesc>
<shortname>deploying-applications-on-tomcat-psi-probe</shortname>
<publishdate>2013-01-21T12:39:03</publishdate>
<length>226</length>
<keywords>java
howto
lambda probe
psi probe
tutorial
tomcat
apache tomcat
web application archive
war
deploy
undeploy
monitoring
management
web application</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>First make sure you have Eclipse for Java EE developers.</p>
<p>&nbsp;</p>
<p>Next goto Java EE perspective, open Servers view, click to add a new server, choose your version of Apache Tomcat, select Tomcat installation directory and click Finish. This integrated your Tomcat instance with Eclipse and copied Tomcat configuration files into project Servers.</p>
<p>&nbsp;</p>
<p>To start server simply press big green button. If you goto http://localhost:8080, you will see 404 message. That's OK, because right now we don't have any application deployed. This message is from Tomcat, so Tomcat runs successfully.</p>
<p>&nbsp;</p>
<p>You can change lots of configuration if you right click on your server and press Open. You can change virtual machine parameters if you click on "Open launch configuration". There you can add Xmx and XX:MaxPermSize parameters.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat and Eclipse integration
]]>
</name>
<youtubeid>lJ-XPBmTZqc</youtubeid>
<shortdesc>
<![CDATA[
How to integrate Apache Tomcat and Eclipse. Configuration in Eclipse, maximum heap size (Xmx) and maximum perm gen size (XX:MaxPermSize) setting.
]]>
</shortdesc>
<shortname>apache-tomcat-and-eclipse-integration</shortname>
<publishdate>2013-01-21T12:40:38</publishdate>
<length>162</length>
<keywords>java
eclipse
howto
tomcat
apache tomcat
integration
configuration
maximum heap size
xmx
maximum perm gen size
xx:maxpermsize</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>In the last screencast I generated classes from&nbsp; XSD file. Now I will use&nbsp; them to work with XML file.<br /><br />To read data from this XML file we must create an instance of JAXBContext. This class has a constructor, that requires either package where are generated classes, or some class from this package. In this class are methods createMarshaller() and createUnmarshaller(). Using unmarshaller we can unmarshall (read data) from XML file to objects. Using marshaller we can save objects to XML files.<br /><br />I will create unmarshaller and unmarshal file sitemap.xml. Notice that using this operation I will get instance of object annotated with @XmlRootElement. Next I can easily work with XML using Java objects. For example I will print all URLs in this file.<br /><br />I can also easily modify XML, for example I will create some new URL and add it to list and next marshal the whole XML to another file.</p>
<pre class="prettyprint">    JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);
    Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
    Urlset urlset = (Urlset) unmarshaller.unmarshal(new File("sitemap.xml"));
    
    List&lt;TUrl&gt; list = urlset.getUrl();
    for (TUrl tUrl : list) {
      System.out.println(tUrl.getLoc());
    }
    
    TUrl url = new TUrl();
    url.setLoc("http://itworks.com/");
    list.add(url);
    
    Marshaller marshaller = jaxbContext.createMarshaller();
    marshaller.marshal(urlset, new File("sitemap2.xml"));
</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
JAXB tutorial part 3: marshalling and unmarshalling data
]]>
</name>
<youtubeid>AVVbuVn0N98</youtubeid>
<shortdesc>
<![CDATA[
How to unmarshall and marshall data to XML using JAXB.
]]>
</shortdesc>
<shortname>jaxb-marshalling-unmarshalling</shortname>
<publishdate>2012-04-29T16:01:02</publishdate>
<length>302</length>
<keywords>java
eclipse
jaxb
xml
xsd
marshalling
unmarshalling
marshal
unmarshal
sitemap
xml binding
sitemap.xml
howto
tutorial
xml schema
xjc
video</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>How to easily generate JAXB classes in Eclipse? Right click on the file and choose Generate -&gt; JAXB classes. Just make sure you have in Project Libraries associated a JDK, not just a simple JRE, otherwise you will get this error: "Could not find or load main class com.sun.tools.internal.xjc.XJCFacade"</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Generating JAXB classes in Eclipse from XSD
]]>
</name>
<youtubeid>zgblFjA-5Ks</youtubeid>
<shortdesc>
<![CDATA[
How to easily generate JAXB classes in Eclipse?
]]>
</shortdesc>
<shortname>generating-jaxb-classes-in-eclipse-from-xsd</shortname>
<publishdate>2014-06-16T20:40:56</publishdate>
<length>141</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
jaxb
Java Architecture For XML Binding
XML Schema
xsd</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>Let's create a Java web application in Eclipse. In this video I will perform this without Maven. Create a New Project -&gt; Dynamic Web Project, type project name: "HelloWorldWeb" and select Dynamic web module version = 3.0, which is Java EE 6.</p>
<p>Whatever you put into WebContent directory will be directly visible to client. Let's add index.jsp page with some welcome text.</p>
<p>JSP file says Hello world :)</p>
<p>Next let's create some servlet, something like HelloServlet. Map it to "/hello.html" and inside doGet() method add this code:</p>
<pre class="prettyprint">PrintWriter out = response.getWriter();
out.println("&lt;html&gt;");
out.println("&lt;body&gt;");
out.println("Hello from first servlet!");
out.println("&lt;/body&gt;");
out.println("&lt;/html&gt;");</pre>
<p>This will show this HTML code to user.</p>
<p>To deploy this project to server, just simply drag and drop this project to appropriate server.</p>
<p>Test index.jsp page and hello.html page.&nbsp;</p>
<p>To create a WAR file right click on this project, choose Export -&gt; WAR file and select a destination. If you look inside created file, you will see that everything that was in WebContent is inside. Content of directories META-INF and WEB-INF is not directly visible to the client. Everything else like index.jsp is directly visible.&nbsp;</p>
<p>Inside WEB-INF are two directories: directory "classes", where are Java class files that were in "Java resources". Right now just our servlet is inside. Inside "lib" directory can be JAR files whose classes would be accessible in this web application. Currently there are none.</p>
<p>Inside lots of web applications is also web.xml file, which is inside WEB-INF directory and is called deployment descriptor of a web application. This file is not required since Java EE 6 and has been mostly replaced by annotations like @WebServlet. You can still use it even in Java EE 6, though.</p>
]]>
</description>
<name>
<![CDATA[
Java EE 6 web application hello world
]]>
</name>
<youtubeid>R87zfu3STDc</youtubeid>
<shortdesc>
<![CDATA[
Java EE 6 web application hello world in Eclipse without Maven. First servlet and simple doGet() method. Export to WAR (Web Application ARchive) file. Java web application structure explained including simple web.xml file.
]]>
</shortdesc>
<shortname>java-ee-6-web-application-hello-world</shortname>
<publishdate>2013-08-05T08:45:05</publishdate>
<length>468</length>
<keywords>java
eclipse
howto
web.xml
java ee 6
hello world
tutorial
servlet
war
web application archive
doget
tomcat</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>In order to use Maven inside Eclipse, you must first install "Maven Integration for Eclipse" plugin from Eclipse Marketplace. Or use STS aka SpringSource Tool Suite or other bundle which has Maven integrated.</p>
<p>If you see this error during build: "Please ensure you are using JDK 1.4 or above and not a JRE", then your Maven runs using JRE, not JDK. Solution is simple, goto Window -&gt; Preferences -&gt; Installed JREs, add your JDK and select it as default.</p>
<p>Now Maven works fine in Eclipse.</p>
<p>If you cannot find Maven archetypes or dependencies in Eclipse wizards, goto Window -&gt; Show View -&gt; Maven Repositories and rebuild indexes of your Global and Local repositories.</p>
<p>Sometimes if you do some radical change in pom.xml file, Eclipse will need to update Maven project. To do so, right click on project, choose Maven -&gt; Update Project.&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Eclipse Maven plugin usage
]]>
</name>
<youtubeid>ZgzP6JNHVDU</youtubeid>
<shortdesc>
<![CDATA[
How to use Eclipse Maven Integration plugin. Installation and basic troubleshooting. How to add dependencies into pom.xml file, rebuild indexes of your repositories and update Maven project.
]]>
</shortdesc>
<shortname>eclipse-maven-plugin-usage</shortname>
<publishdate>2013-08-05T08:58:33</publishdate>
<length>269</length>
<keywords>java
eclipse
howto
tutorial
maven</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>How to change file name generated by mvn package?</p>
<p>Default name is &lt;Actifact ID&gt;-&lt;version&gt;.extension (WAR / JAR). To change this simply open pom.xml and add inside &lt;build&gt; tag:</p>
<pre class="prettyprint">&lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;</pre>
<p>Type file name without extension, Maven will add extension on its own. You can also use properties like ${project.artifactId}.</p>
]]>
</description>
<name>
<![CDATA[
How to change file name generated by mvn package
]]>
</name>
<youtubeid>uIfNiUy6IFY</youtubeid>
<shortdesc>
<![CDATA[
You can simply change default file name generated by "mvn package" inside pom.xml file using tag finalName.
]]>
</shortdesc>
<shortname>how-to-change-file-name-generated-by-mvn-package</shortname>
<publishdate>2013-08-05T09:04:34</publishdate>
<length>102</length>
<keywords>java
eclipse
howto
tutorial
maven
finalname
file name
package
mvn</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>Which JDK version will Maven use to compile source of your project by default depends on Maven version. It used to be 1.4, right now it's 1.5, but usually you want to change it.</p>
<p>Maven compiler plugin enables Maven to compile the project source with a particular JDK version. Now I will tell Maven to use JDK 1.6 to compile the project source code:</p>
<pre class="prettyprint">&nbsp; &lt;build&gt;
&nbsp; &nbsp; &lt;plugins&gt;
&nbsp; &nbsp; &nbsp; &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.0&lt;/version&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.6&lt;/source&gt;
          &lt;target&gt;1.6&lt;/target&gt;
        &lt;/configuration&gt;
&nbsp; &nbsp; &nbsp; &lt;/plugin&gt;
&nbsp; &nbsp; &lt;/plugins&gt;
&nbsp; &lt;/build&gt;</pre>
<p>If you do a radical change like this, Eclipse will need to update Maven project. To do so, right click on project, choose Maven -&gt; Update Project.</p>
]]>
</description>
<name>
<![CDATA[
How to compile Maven project with different Java version
]]>
</name>
<youtubeid>wYg5w8cXnGI</youtubeid>
<shortdesc>
<![CDATA[
Maven compiler plugin enables Maven to compile the project source with a particular Java version. Now I will tell Maven to use Java 1.6 to compile the project source code.
]]>
</shortdesc>
<shortname>how-to-compile-maven-project-with-different-java-version</shortname>
<publishdate>2013-08-05T09:02:01</publishdate>
<length>114</length>
<keywords>java
eclipse
howto
tutorial
maven
plugin
compile
jdk
project
source
pom.xml
version
jdk version
maven compile</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>Let's create a Java web application in STS aka SpringSource Tool Suite using Maven. I could do the same in plain Eclipse with Maven plugin installed, but this saves me lots of time.</p>
<p>Let's create a new project. New -&gt; Other -&gt; Maven Project. We will use archetype. Search for jee5. If you cannot find this archetype, goto Window -&gt; Show view -&gt; Other -&gt; Maven repositories and rebuild index of central repository. This will take a while, so meanwhile grab a coffee.</p>
<p>Once the index has been rebuilt, choose artifact with Artifact ID webapp-jee5, set Group ID: com.javavids.webapp, Artifact ID: HelloWorldWeb, package the same as Group ID and press Finish.</p>
<p>If you do it the first time, it may take several seconds to create a project as you see it here. Maven will meanwhile download archetype and create this project structure.</p>
<p>It's a classic Maven project, inside src/main/java are Java classes, inside src/main/webapp are public files and WEB-INF directory with web.xml. Inside project is pom.xml file, where are dependencies.</p>
<p>As you can see, we already have index.jsp file with hello world message. Let's create a Servlet. Let's call it HelloServlet and map it to "/hello.html". Because I created a Java EE 5 project, there's no @WebServlet annotation, but servlet mapping is defined in web.xml.</p>
<p>Delete constructor and doPost() method and into doGet() method add this code:</p>
<pre class="prettyprint">PrintWriter out = response.getWriter();
out.println("&lt;html&gt;");
out.println("&lt;body&gt;");
out.println("Hello from first servlet!");
out.println("&lt;/body&gt;");
out.println("&lt;/html&gt;");</pre>
<p>To deploy this project to server, just simply drag and drop this project to appropriate server.</p>
<p>Test index.jsp page and hello.html page.</p>
<p>To create a WAR file, right click on this project, Run As -&gt; Maven build -&gt; and add goal "package". This will create a standard WAR file inside target directory. If you do it the first time, Maven will download some files, so it will take a little bit longer than here.</p>
<p>Using Maven you can even startup your project without local server. Stop your local server and run this Maven project with goal tomcat:run. This will download Tomcat and next it will deploy this application on this embedded server. I use this for demoing purposes, but for development I use Tomcat integrated with Eclipse as I demonstrated earlier.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Java EE 5 web application with Maven
]]>
</name>
<youtubeid>Cae5-cvDKDs</youtubeid>
<shortdesc>
<![CDATA[
Java web application created using STS and Maven. First servlet and doGet() method. How to create a WAR (Web Application ARchive) file using Maven. How to use Tomcat integrated with Eclipse and embedded Tomcat using Maven.
]]>
</shortdesc>
<shortname>java-ee-5-web-application-with-maven</shortname>
<publishdate>2013-08-05T09:34:26</publishdate>
<length>399</length>
<keywords>java
eclipse
howto
maven
tutorial
sts
springsource tool suite
servlet
doget
war
web application archive
tomcat
embedded
hello world</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>In STS aka SpringSource Tool Suite you can create a Maven web application and then simply drag and drop it to integrated server and everything works as expected.&nbsp;</p>
<p>If you don't want to use STS, then you must first install plugin "Maven Integration for Eclipse" from Marketplace.</p>
<p>Next create a web project, I will use "webapp-jee5" archetype.</p>
<p>Now if you want to drag and drop this project into a server, Eclipse won't allow deployment. Why? Because this project is a Java project, not a web application. Right click on this project -&gt; Properties -&gt; choose Project Facets, Convert to faceted form and select a facet "Dynamic Web Module". This requires some configuration, you must tell Eclipse where are public web files. By default Eclipse uses WebContent directory, but we have them somewhere else -&gt; in src/main/webapp directory.</p>
<p>Now Eclipse will allow us deployment of this project. But there's one major problem. If your project depends on some dependencies, integrated Tomcat won't take them into account. I will show you.</p>
<p>For example let's add dependency to commons-lang.&nbsp;</p>
<p>Inside index.jsp I will add:</p>
<p>user name: &lt;%=SystemUtils.USER_NAME%&gt;</p>
<p>Now you see that this doesn't work.</p>
<p>To correct this problem, you must right click your project, choose Preferences -&gt; Deployment Assembly and add Java Build Path Entries -&gt; Maven Dependencies.</p>
<p>Now everything should work as expected.</p>
]]>
</description>
<name>
<![CDATA[
How to use Maven project with integrated Tomcat
]]>
</name>
<youtubeid>oJfqv67qPw0</youtubeid>
<shortdesc>
<![CDATA[
How to use Maven project with integrated Tomcat inside Eclipse without STS (SpringSource Tool Suite).
]]>
</shortdesc>
<shortname>how-to-use-maven-project-with-integrated-tomcat</shortname>
<publishdate>2013-08-05T09:37:55</publishdate>
<length>280</length>
<keywords>java
eclipse
howto
tutorial
maven
tomcat
project
web application
java ee</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>How to install JPA Diagram Editor in Eclipse?&nbsp;</p>
<p>&nbsp;</p>
<p>If you have Eclipse Helios, Indigo or Juno, goto Help -&gt; Eclipse Marketplace, search for "JPA" and install the JPA Diagram Editor.&nbsp;</p>
<p>&nbsp;</p>
<p>Since Eclipse Kepler goto Help -&gt; Install New Software -&gt; Work with: Kepler, type "JPA", search for Dali Java Persistence Tools - JPA Diagram Editor and install this plugin.</p>
<p>&nbsp;</p>
<p>After installation right click on the persistence.xml file and choose Open Diagram, which will open this window. Now you can drag-and-drop entities here and you will see the diagram.&nbsp;</p>
<p>&nbsp;</p>
<p>Beware that if you click on Delete button, you will delete the entity not only from this diagram, but also from disc! In order to erase the entity from the diagram, press this eraser button.</p>
<p>&nbsp;</p>
<p>You can also create new entities and set their relations using this palette, but I don't use it, because it's easier to write it manually.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse JPA Diagram Editor
]]>
</name>
<youtubeid>iX9syjyU094</youtubeid>
<shortdesc>
<![CDATA[
How to install and use JPA Diagram Editor in Eclipse?
]]>
</shortdesc>
<shortname>eclipse-jpa-diagram-editor</shortname>
<publishdate>2014-01-25T16:14:46</publishdate>
<length>183</length>
<keywords>java
eclipse
howto
tutorial
Hibernate (Software)
Java Persistence API (Software)
jpa</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>How to create a Java EE 6 Maven application in Eclipse?</p>
<p>&nbsp;</p>
<p>First make sure you have up-to-date Maven central index in Eclipse. Goto Window -&gt; Show View -&gt; Other -&gt; Maven Repositories, select Global Repositories -&gt; central, right click and choose Rebuild Index.</p>
<p>&nbsp;</p>
<p>After it's done, create a new Maven project (using File -&gt; New -&gt; Other -&gt; Maven Project), don't skip archetype selection, select project with artifactId webapp-javaee6 and create a Maven project.&nbsp;</p>
<p>&nbsp;</p>
<p>To create a WAR file, run goal package.</p>
<p>&nbsp;</p>
<p>To run this application using embedded Tomcat server open pom.xml and add plugin tomcat7-maven-plugin. Next run goal tomcat7:run. Open browser and you will see contents of index.jsp file.</p>
<p>&nbsp;</p>
<p>This plugin maven-dependency-plugin is useless, so you can delete it.</p>
]]>
</description>
<name>
<![CDATA[
Maven Java EE 6 application
]]>
</name>
<youtubeid>l3KIEWpbp50</youtubeid>
<shortdesc>
<![CDATA[
How to create a Java EE 6 Maven application in Eclipse and run it using embedded Tomcat?
]]>
</shortdesc>
<shortname>maven-java-ee-6-application</shortname>
<publishdate>2014-01-25T16:55:39</publishdate>
<length>222</length>
<keywords>java
eclipse
howto
tutorial
Apache Maven
Apache Tomcat (Software)
Java Platform Enterprise Edition (Software)
java ee 6</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p><span style="font-size: 10px;">First make sure that you compile your application using at least Java SE 6:</span></p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.1&lt;/version&gt;
  &lt;configuration&gt;
    &lt;target&gt;1.6&lt;/target&gt;
    &lt;source&gt;1.6&lt;/source&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Then goto this website: http://mojo.codehaus.org/jaxb2-maven-plugin/index.html</p>
<p>&nbsp;</p>
<p>If you want to generate JAXB classes based on XSD, you internally use xjc command in JDK. Add this plugin to pom.xml:</p>
<pre class="prettyprint">&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
&nbsp; &lt;artifactId&gt;jaxb2-maven-plugin&lt;/artifactId&gt;
&nbsp; &lt;version&gt;1.6&lt;/version&gt;
&nbsp; &lt;executions&gt;
&nbsp;   &lt;execution&gt;
&nbsp; &nbsp;   &lt;id&gt;xjc&lt;/id&gt;
&nbsp; &nbsp; &nbsp; &lt;goals&gt;
&nbsp; &nbsp; &nbsp;   &lt;goal&gt;xjc&lt;/goal&gt;
&nbsp; &nbsp; &nbsp; &lt;/goals&gt;
&nbsp; &nbsp; &lt;/execution&gt;
&nbsp; &lt;/executions&gt;
&nbsp; &lt;configuration&gt;
&nbsp;   &lt;packageName&gt;com.example.myschema&lt;/packageName&gt;
&nbsp; &lt;/configuration&gt;
&lt;/plugin&gt;</pre>
<p>Change package name to whatever you like. Add your XSD file inside src/main/xsd and once you call at least mvn generate-sources, JAXB classes will be generated automatically inside target/generated-sources/jaxb. Btw. Maven phase generate-sources is called very early in Maven lifecycle (before compile).</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Generating JAXB classes with Maven plugin
]]>
</name>
<youtubeid>qX-Erp8a3wo</youtubeid>
<shortdesc>
<![CDATA[
How to generate JAXB classes based on XSD file automatically using Maven?
]]>
</shortdesc>
<shortname>generating-jaxb-classes-with-maven-plugin</shortname>
<publishdate>2014-06-16T20:43:19</publishdate>
<length>180</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Java Architecture For XML Binding
xsd
xml
maven
plugin
codehaus</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>You can run your web applications on an embedded web container. Now I will show you how to use Jetty.&nbsp;</p>
<p>&nbsp;</p>
<p>But first a little bit about Jetty. It's a web container like Apache Tomcat. If you google Jetty, you will see Jetty on Codehaus and Eclipse. Jetty was a long time Codehaus project, but later it was moved to Eclipse Foundation.&nbsp;</p>
<p>&nbsp;</p>
<p>Which version should you use depends on your Java SE and Java EE version. Let's see a documentation. There's "What version do I use?" and there's version 9, 8, 7. Version 9 requires Java SE 7 and implements Java EE 6.&nbsp;</p>
<p>&nbsp;</p>
<p>To use Jetty 9 in your project add this plugin to your pom.xml file:</p>
<pre class="prettyprint">&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;9.1.0.v20131115&lt;/version&gt;
  &lt;/plugin&gt;
</pre>
<p>To use Jetty 8 go to Codehaus, there's documentation and use this plugin instead:</p>
<pre class="prettyprint">&lt;plugin&gt;
  &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;8.1.14.v20131031&lt;/version&gt;
&lt;/plugin&gt;
</pre>
<p>To run Jetty server, run your Maven application with goal:</p>
<pre class="prettyprint">jetty:run
</pre>
<p>To stop Jetty server click on button Terminate in Eclipse.</p>
<p>&nbsp;</p>
<p>You can also stop Jetty server using goal jetty:stop, but you have to configure it first:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;9.1.0.v20131115&lt;/version&gt;
  &lt;configuration&gt;
    &lt;stopPort&gt;9966&lt;/stopPort&gt;
    &lt;stopKey&gt;foo&lt;/stopKey&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
</pre>
<p>&nbsp;</p>
<p>And then if I run goal jetty:run, I can use goal jetty:stop to stop this Jetty instance.</p>
<p>&nbsp;</p>
<p>There are lot's of configuration options, see documentation.</p>
]]>
</description>
<name>
<![CDATA[
How To Use Maven Jetty Plugin
]]>
</name>
<youtubeid>8_gcG1Lc4F0</youtubeid>
<shortdesc>
<![CDATA[
How to use Maven Jetty plugin for embedded Jetty web container. Jetty is popular Java EE servlet container. Jetty run, stop and configuration.
]]>
</shortdesc>
<shortname>how-to-use-maven-jetty-plugin</shortname>
<publishdate>2014-01-25T17:06:20</publishdate>
<length>226</length>
<keywords>java
eclipse
howto
tutorial
jetty
maven
jetty plugin
jetty java
jetty maven plugin
jetty:run
jetty:stop
jetty configuration
java ee
web container
servlet container</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>How to connect Oracle database in Eclipse?</p>
<p>&nbsp;</p>
<p>First download JDBC driver. Be sure to download appropriate driver for your database version. Also you need an Oracle account, which is free.</p>
<p>&nbsp;</p>
<p>In order to connect to this database in Eclipse, you must have Eclipse for Java EE developers (or installed plugin Web Tools Platform - WTP).</p>
<p>&nbsp;</p>
<p>Switch to Database development perspective and follow my instructions.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Database connection in Eclipse (Oracle)
]]>
</name>
<youtubeid>2orrUVCrrJo</youtubeid>
<shortdesc>
<![CDATA[
How to connect Oracle database in Eclipse?
]]>
</shortdesc>
<shortname>database-connection-in-eclipse-oracle</shortname>
<publishdate>2014-01-30T19:10:54</publishdate>
<length>213</length>
<keywords>java
eclipse
howto
tutorial
Database Connection
Oracle Database (Software)</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>If you run embedded Tomcat using goal tomcat7:run, you will notice that when you change some Java class (for example a Servlet), the application won't automatically redeploy, so you will have to stop the whole server and run it again.</p>
<p>&nbsp;</p>
<p>To change that go to pom.xml and add this configuration to the tomcat plugin:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;configuration&gt;
&nbsp; &lt;contextFile&gt;src/main/webapp/META-INF/context.xml&lt;/contextFile&gt;
&lt;/configuration&gt;</pre>
<p>&nbsp;</p>
<p>Next create a context.xml file:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;Context reloadable="true" backgroundProcessorDelay="1"&gt;
&lt;/Context&gt;</pre>
<p>&nbsp;</p>
<p>And finally restart the server. And now if you change something in some Java class, the Tomcat will redeploy the application automatically.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Also if you use STS (Spring Tool Suite), in latest versions you have this Relaunch button, which will restart the server.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Maven Embedded Tomcat automatic redeploy
]]>
</name>
<youtubeid>UEE4r9XECew</youtubeid>
<shortdesc>
<![CDATA[
How to automatically redeploy embedded Tomcat if you change some Java class?
]]>
</shortdesc>
<shortname>maven-embedded-tomcat-automatic-redeploy</shortname>
<publishdate>2014-01-26T09:53:06</publishdate>
<length>196</length>
<keywords>java
eclipse
howto
tutorial
Apache Tomcat (Software)
deploy
redeploy
maven
embedded tomcat
sts
spring tool suite</keywords>
</item>
<item>
<groupshortname>java-database</groupshortname>
<description>
<![CDATA[
<p>How to connect PostgreSQL database in Eclipse?</p>
<p>&nbsp;</p>
<p>First download JDBC driver. Be sure to download appropriate driver for your database version.</p>
<p>&nbsp;</p>
<p>In order to connect to this database in Eclipse, you must have Eclipse for Java EE developers (or installed plugin Web Tools Platform - WTP).</p>
<p>&nbsp;</p>
<p>Switch to Database development perspective and follow my instructions.</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Database connection in Eclipse (PostgreSQL)
]]>
</name>
<youtubeid>kbI5di_hqe4</youtubeid>
<shortdesc>
<![CDATA[
How to connect PostgreSQL database in Eclipse?
]]>
</shortdesc>
<shortname>database-connection-in-eclipse-postgresql</shortname>
<publishdate>2014-01-30T19:08:45</publishdate>
<length>130</length>
<keywords>java
eclipse
howto
tutorial
PostgreSQL (Software)
Database Connection</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>How to install Maven?</p>
<p>&nbsp;</p>
<p>First download Maven zip file, extract it and configure the Windows environment path variable.</p>
<p>&nbsp;</p>
<p>Make sure you have installed JDK and JAVA_HOME variable points to JDK folder.&nbsp;</p>
<p>&nbsp;</p>
<p>Add new variable MAVEN_HOME and point it to your Maven folder.</p>
<p>&nbsp;</p>
<p>Update Path variable, append: ;%MAVEN_HOME%\bin</p>
<p>&nbsp;</p>
<p>Now open command line and type mvn -version to test installation.</p>
]]>
</description>
<name>
<![CDATA[
Maven installation in Windows
]]>
</name>
<youtubeid>BBB5UvpObQ4</youtubeid>
<shortdesc>
<![CDATA[
How to install Maven in Windows?
]]>
</shortdesc>
<shortname>maven-installation-in-windows</shortname>
<publishdate>2014-01-30T20:13:02</publishdate>
<length>214</length>
<keywords>java
howto
tutorial
Apache Maven
Windows
Microsoft Windows (Operating System)
Java (Software)</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>When will you create a multi module Maven project? Typically if you want to create an application which consists of layers and you want to split them into separate Maven projects. In typical web application you have three layers: integration, service and presentation layer.&nbsp;</p>
<p>&nbsp;</p>
<p>To create such a project in Eclipse follow my instructions.</p>
]]>
</description>
<name>
<![CDATA[
Maven multi module project
]]>
</name>
<youtubeid>obHce3gvgec</youtubeid>
<shortdesc>
<![CDATA[
How to create a Multi module project?
]]>
</shortdesc>
<shortname>maven-multi-module-project</shortname>
<publishdate>2014-01-31T13:20:47</publishdate>
<length>465</length>
<keywords>java
eclipse
howto
tutorial
Apache Maven
multi module
module
project
dependency</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>From http://tomcat.apache.org you can download a ZIP file, unzip it, run startup.bat in bin directory and you will have Tomcat up and running. I covered this in previous tutorial. This is great for testing and development and you should definitelly try it, but in production there's a more useful approach, which is running Tomcat as a Windows service.&nbsp;</p>
<p>&nbsp;</p>
<p>First download Tomcat Windows Service installer and run it. During installation you can define ports and create a user, which will be able to access a Manager application. &nbsp;You must also select a path to Java. And finally a destination folder where will be Tomcat installed.&nbsp;</p>
<p>&nbsp;</p>
<p>The only difference between this Tomcat and a Tomcat from a ZIP file is inside a bin directory, where are no startup and shutdown scripts, but there are two executable files. First one starts a Tomcat and the second one is an application used for Tomcat startup configuration.&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat as a Windows service
]]>
</name>
<youtubeid>3frPunb4Bbk</youtubeid>
<shortdesc>
<![CDATA[
How to run Tomcat as a Windows service?
]]>
</shortdesc>
<shortname>apache-tomcat-as-a-windows-service</shortname>
<publishdate>2014-03-19T18:14:11</publishdate>
<length>222</length>
<keywords>java
howto
tutorial
Apache Tomcat (Software)
Windows</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>When you download Apache Tomcat, you have installation and configuration in one place. That is not best practice. Why? Because usually you make some changes to Tomcat configuration. What if you later wanted to upgrade your installation? You would have to merge the new Tomcat installation with your custom configuration. How to avoid this mess? You just simply split Tomcat into two parts:</p>
<p>&nbsp;</p>
<p>1. installation (Catalina Home)&nbsp;<br />2. configuration (Catalina Base)&nbsp;</p>
<p>&nbsp;</p>
<p>What is in each part? Installation contains bin directory and libraries. Configuration contains the rest with your custom libraries. What binds them together is a system variable CATALINA_BASE. In practice you run Tomcat from Tomcat installation, which loads configuration and starts Tomcat.</p>
<p>&nbsp;</p>
<p>Let's see if it works. I downloaded an application from my GitHub account where I have lot's of example open source web applications for Java programmers. Let's copy the WAR inside ${catalina.base}/webapps. If the application is deployed, then the Tomcat uses this configuration.</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat Configuration
]]>
</name>
<youtubeid>vqT9qP12S24</youtubeid>
<shortdesc>
<![CDATA[
How to split Apache Tomcat installation (catalina home) and configuration (catalina base)? Tomcat best practice.
]]>
</shortdesc>
<shortname>apache-tomcat-configuration</shortname>
<publishdate>2014-03-20T09:45:31</publishdate>
<length>292</length>
<keywords>java
eclipse
howto
tutorial
Apache Tomcat (Software)
configuration
installation
catalina base
catalina_base
catalina home
catalina</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>If you have XSD file, the easiest way how to create JAXB classes is to generate them. If you don't have XSD, you can just simply write them from scratch. There's just one thing you need to do, otherwise it won't work and that's annotation @XmlRootElement in your JAXB class, which is an XML root element.</p>
<p>&nbsp;</p>
<p>Suppose you have this XML file with information who attended some training:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;training&gt;
  &lt;name&gt;Java Training&lt;/name&gt;
  &lt;person id="1"&gt;
    &lt;name&gt;George&lt;/name&gt;
  &lt;/person&gt;
  &lt;person id="2"&gt;
    &lt;name&gt;Michael&lt;/name&gt;
  &lt;/person&gt;
&lt;/training&gt;</pre>
<p>&nbsp;</p>
<p>Inside is a single tag name and multiple person tags. Let's create a Training class:</p>
<p>&nbsp;</p>
<pre class="prettyprint">@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public class Training {
&nbsp;
&nbsp; @XmlElement(name = "person")
&nbsp; private List&lt;Person&gt; persons;
&nbsp;
&nbsp; private String name;
&nbsp;
&nbsp; public List&lt;Person&gt; getPersons() {
&nbsp; &nbsp; return persons;
&nbsp; }
&nbsp;
&nbsp; public void setPersons(List&lt;Person&gt; persons) {
&nbsp; &nbsp; this.persons = persons;
&nbsp; }
&nbsp;
&nbsp; public String getName() {
&nbsp; &nbsp; return name;
&nbsp; }
&nbsp;
&nbsp; public void setName(String name) {
&nbsp; &nbsp; this.name = name;
&nbsp; }
&nbsp;
}</pre>
<p>&nbsp;</p>
<p>And now let's create a Person class:</p>
<p>&nbsp;</p>
<pre class="prettyprint">@XmlAccessorType(XmlAccessType.FIELD)
public class Person {
&nbsp;
&nbsp; @XmlAttribute
&nbsp; private int id;
&nbsp;
&nbsp; private String name;
&nbsp;
&nbsp; public String getName() {
&nbsp; &nbsp; return name;
&nbsp; }
&nbsp;
&nbsp; public void setName(String name) {
&nbsp; &nbsp; this.name = name;
&nbsp; }
&nbsp;
&nbsp; public int getId() {
&nbsp; &nbsp; return id;
&nbsp; }
&nbsp;
&nbsp; public void setId(int id) {
&nbsp; &nbsp; this.id = id;
&nbsp; }
}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>And some test code:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&nbsp; &nbsp; JAXBContext jaxbContext = JAXBContext.newInstance(Training.class);
&nbsp; &nbsp; Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
&nbsp; &nbsp; Training training = (Training) unmarshaller.unmarshal(new File("persons.xml"));
&nbsp; &nbsp; System.out.println("training name: " + training.getName());
&nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; List&lt;Person&gt; persons = training.getPersons();
&nbsp; &nbsp; for (Person person : persons) {
&nbsp; &nbsp; &nbsp; System.out.println(person.getName() + ", id: " + person.getId());
&nbsp; &nbsp; }</pre>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Creating JAXB classes from scratch
]]>
</name>
<youtubeid>xe_aULVe_4Y</youtubeid>
<shortdesc>
<![CDATA[
If you have XSD file, the easiest way how to create JAXB classes is to generate them. If you don't have XSD, you can just simply write them from scratch.
]]>
</shortdesc>
<shortname>creating-jaxb-classes-from-scratch</shortname>
<publishdate>2014-06-16T20:50:58</publishdate>
<length>478</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Java Architecture For XML Binding
jaxb
xml</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>Apache Tomcat out-of-the-box uses ISO-8859-1 (also called Latin 1). This encoding doesn't contain lots of characters, which are commonly used outside USA. UTF-8 encoding is de facto standard, which contains characters missing in ISO-8859-1. How to use UTF-8 in Apache Tomcat?</p>
<p>&nbsp;</p>
<p>First go to [apache-tomcat]/conf/server.xml and add to all Connectors this attribute: URIEncoding="UTF-8". This will enable UTF-8 for HTTP GET parameters.</p>
<p>&nbsp;</p>
<p>Next open [apache-tomcat]/conf/web.xml and uncomment setCharacterEncodingFilter. Do not forget to uncomment not only filter definition, but also filter-mapping. This will enable UTF-8 for HTTP POST parameter. Btw you could set this filter inside your web application.</p>
<p>&nbsp;</p>
<p>Now if you use UTF-8 everywhere in your application, you won't have any trouble. For more information follow this link: http://wiki.apache.org/tomcat/FAQ/CharacterEncoding</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat &amp; UTF-8
]]>
</name>
<youtubeid>xx09PS38P_0</youtubeid>
<shortdesc>
<![CDATA[
Apache Tomcat out-of-the-box uses ISO-8859-1 (also called Latin 1). How to use UTF-8 in Apache Tomcat?
]]>
</shortdesc>
<shortname>apache-tomcat-utf-8</shortname>
<publishdate>2014-03-21T10:38:24</publishdate>
<length>194</length>
<keywords>java
eclipse
howto
tutorial
Apache Tomcat (Software)
UTF-8</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>If you download NetBeans for Java EE, you may also install Apache Tomcat. It is available in the Services tab under Servers.</p>
<p>&nbsp;</p>
<p>If you need more control over Tomcat, you can download a ZIP file, unzip it and goto NetBeans -&gt; Services -&gt; right click on Servers, Add Server -&gt; Apache Tomcat or TomEE, select where you unzipped Tomcat and set some username and password.&nbsp;</p>
<p>&nbsp;</p>
<p>And you're done. Now you can start the server and create a web application which will run on this server.</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat &amp; NetBeans integration
]]>
</name>
<youtubeid>22tM35GO8Ew</youtubeid>
<shortdesc>
<![CDATA[
How to integrate your Apache Tomcat and NetBeans IDE?
]]>
</shortdesc>
<shortname>apache-tomcat--netbeans-integration</shortname>
<publishdate>2014-03-19T18:17:20</publishdate>
<length>127</length>
<keywords>java
howto
tutorial
NetBeans (Software)
Apache Tomcat (Software)
Java (Software)</keywords>
</item>
<item>
<groupshortname>apache-tomcat</groupshortname>
<description>
<![CDATA[
<p>How to deploy some web application to Apache Tomcat? The easiest way is to copy a WAR file to webapps directory. Or using a Tomcat manager. I covered these in a previous tutorial.</p>
<p>&nbsp;</p>
<p>The most flexible and recommended way is to create a Context file. For example let's create a ROOT.xml file with this contents:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;Context docBase="c:/tomcat/eshop-web.war"&gt;
&lt;/Context&gt;</pre>
<p>&nbsp;</p>
<p>Name of the file will be the path of your web application and inside the Context file must be location of your web application.</p>
<p>&nbsp;</p>
<p>I will use a web application from my GitHub account where I have lot's of example open source web applications for Java programmers.</p>
<p>&nbsp;</p>
<p>To deploy this web application, first make sure you already don't have ROOT application in webapps directory. Next copy ROOT.xml to [apache-tomcat]/conf/Catalina/localhost. This will trigger deployment and your application will be deployed as a default web application. To undeploy this web application, simply remove ROOT.xml file, which will trigger the undeploy process.</p>
]]>
</description>
<name>
<![CDATA[
Apache Tomcat Deploy web application
]]>
</name>
<youtubeid>TPUBmDD1PrE</youtubeid>
<shortdesc>
<![CDATA[
How to deploy web application on Apache Tomcat using Context file? This is the most flexible and recommended way.
]]>
</shortdesc>
<shortname>apache-tomcat-deploy-web-application</shortname>
<publishdate>2014-03-21T08:42:03</publishdate>
<length>214</length>
<keywords>java
eclipse
howto
tutorial
Apache Tomcat (Software)
deploy
context</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>If you see this error: "Access restriction: The type JAXBContext is not accessible due to restriction on required library", then it means, that you compile your application with older Java version. JAXB requires at least Java SE 6.</p>
<p>&nbsp;</p>
<p>If you don't use Maven, goto project properties, select Java Build Path -&gt; Libraries and choose JRE, which is at least Java SE 6.</p>
<p>&nbsp;</p>
<p>Or if you use Maven, open pom.xml and add this plugin:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;plugin&gt;
&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
&lt;version&gt;3.1&lt;/version&gt;
&lt;configuration&gt;
&lt;target&gt;1.6&lt;/target&gt;
&lt;source&gt;1.6&lt;/source&gt;
&lt;/configuration&gt;
&lt;/plugin&gt;
&nbsp;</pre>
]]>
</description>
<name>
<![CDATA[
JAXB: Access Restriction Warning
]]>
</name>
<youtubeid>G29RIhENje8</youtubeid>
<shortdesc>
<![CDATA[
How to solve "Access restriction: The type JAXBContext is not accessible due to restriction on required library"?
]]>
</shortdesc>
<shortname>jaxb-access-restriction-warning</shortname>
<publishdate>2014-06-16T20:59:43</publishdate>
<length>113</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
maven
jaxb
Java Architecture For XML Binding
xml</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>Tired of pressing CTRL + SPACE to get Content Assist in Eclipse? You can set Eclipse to show Content Assist automatically. How to do that? Open Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Content Assist and set:</p>
<p>&nbsp;</p>
<p>Auto activation delay: for example 40 milliseconds</p>
<p>Auto activation triggers for Java:&nbsp;</p>
<pre class="prettyprint">._abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</pre>
<p>&nbsp;</p>
<p>And now whenever you start typing something in Java code, Content Assist will pop up automatically.</p>
<p>&nbsp;</p>
<p>Btw. it takes some time before you get used to it, but once you do, your efficiency will skyrocket. Also after some time you will notice that instead pressing CTRL + SPACE to show Content Assist window, you will start pressing ESCAPE to kill it.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse Content Assist without Ctrl + Space
]]>
</name>
<youtubeid>z9v2K2DO_Xs</youtubeid>
<shortdesc>
<![CDATA[
Tired of pressing CTRL + SPACE to get Content Assist in Eclipse?
]]>
</shortdesc>
<shortname>eclipse-content-assist-without-ctrl-space</shortname>
<publishdate>2014-03-21T19:42:49</publishdate>
<length>72</length>
<keywords>java
eclipse
howto
tutorial
content assist
ctrl+space</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>If you work with Maven in Eclipse, there's one default setting, which will eventually drive you mad. And that's when you open a pom.xml file, you won't see XML, but a wizard. And the worst part is, that you seldom change what is in this default page.</p>
<p>&nbsp;</p>
<p>Usually you just want to see plain XML. How to show XML automatically when you open pom.xml file? Goto Window -&gt; Preferences -&gt; Maven -&gt; User Interface -&gt; and check "Open XML page in the POM editor by default"</p>
]]>
</description>
<name>
<![CDATA[
Open XML in pom.xml by default in Eclipse
]]>
</name>
<youtubeid>Xvhys-IlDeg</youtubeid>
<shortdesc>
<![CDATA[
How to open plain XML in pom.xml by default in Eclipse? Tip for effective Maven usage.
]]>
</shortdesc>
<shortname>open-xml-in-pomxml-by-default-in-eclipse</shortname>
<publishdate>2014-03-22T09:00:06</publishdate>
<length>77</length>
<keywords>java
eclipse
howto
tutorial
maven
xml
pom.xml</keywords>
</item>
<item>
<groupshortname>java-xml</groupshortname>
<description>
<![CDATA[
<p>First of all, there may be many reasons why OutOfMemoryError pops up. But with JAXB I encountered mainly two reasons.</p>
<p>&nbsp;</p>
<p>The first one is that you have a too large XML file. You can increase your Java heap memory using -Xmx. If the file is really big or if you just increased the heap memory and it works but it's too slow, you may need to use SAX to parse this XML file. So no JAXB for you.</p>
<p>&nbsp;</p>
<p>The second reason is if you have a method which runs periodically and inside you create a instance of JAXBContext. It's important to have just single instance of this class in the whole application. You can ensure that by having this object as a static attribute.</p>
<p>&nbsp;</p>
<p>Bad:</p>
<p>&nbsp;</p>
<pre class="prettyprint">JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);</pre>
<p>&nbsp;</p>
<p>Good:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&nbsp; private static JAXBContext jaxbContext;
&nbsp;&nbsp;
&nbsp; static {
&nbsp; &nbsp; try {
&nbsp; &nbsp; &nbsp; jaxbContext = JAXBContext.newInstance(ObjectFactory.class);
&nbsp; &nbsp; } catch (JAXBException e) {
&nbsp; &nbsp; &nbsp; e.printStackTrace();
&nbsp; &nbsp; }
&nbsp; }</pre>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
JAXB and OutOfMemoryError
]]>
</name>
<youtubeid>Y8rM5HGYZwI</youtubeid>
<shortdesc>
<![CDATA[
How to solve two common reasons for OutOfMemoryError, which you may encounter using JAXB.
]]>
</shortdesc>
<shortname>jaxb-and-outofmemoryerror</shortname>
<publishdate>2014-06-16T20:57:04</publishdate>
<length>210</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Java Architecture For XML Binding
jaxb
out of memory error
xml</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>Since Eclipse Kepler Maven is pre-installed and Eclipse uses integrated Maven, but for example you may want to integrate newer Maven version.&nbsp;</p>
<p>&nbsp;</p>
<p>So how to integrate your external Maven installation with Eclipse?&nbsp;</p>
<p>&nbsp;</p>
<p>Goto Window -&gt; Preferences -&gt; Maven -&gt; Installations and add your Maven installation.</p>
]]>
</description>
<name>
<![CDATA[
Eclipse &amp; external Maven installation integration
]]>
</name>
<youtubeid>xAf5Fq0DXQI</youtubeid>
<shortdesc>
<![CDATA[
How to integrate your external Maven installation with Eclipse?
]]>
</shortdesc>
<shortname>eclipse-external-maven-installation-integration</shortname>
<publishdate>2014-03-22T09:27:47</publishdate>
<length>90</length>
<keywords>java
eclipse
howto
tutorial
maven
windows
linux
mac os x
installation
integration</keywords>
</item>
<item>
<groupshortname>eclipse</groupshortname>
<description>
<![CDATA[
<p>When you start a new web project, you often do not have a web.xml file. But usually after some time you need it, so how to effectively create it? You can either create it by hand, in this video tutorial description are examples of web.xml files for various Java EE versions. Or you can generate it straight from Eclipse.</p>
<p>&nbsp;</p>
<p>For example when you create a new Maven project, web.xml was not generated. First make sure you are in a Java EE perspective. Next in webapp directory create WEB-INF directory, right click on Deployment Descriptor and select "Generate Deployment Descriptor Stub".&nbsp;</p>
<p>&nbsp;</p>
<p>This will generate Java EE 5 web.xml file (Servlet version is 2.5). If you want to change it, goto project Properties -&gt; Project Facets, look for "Dynamic Web Module" and change version (btw. this is Servlet specification version):</p>
<p>&nbsp;</p>
<p>- 2.5 is Java EE 5</p>
<p>- 3.0 is Java EE 6</p>
<p>- 3.1 is Java EE 7</p>
<p>&nbsp;</p>
<p>You will also have to increase Java version, because each Servlet specification requires at least some Java version and for example Servlet specification 3.0 requires at least Java 6.</p>
<p>&nbsp;</p>
<p>Now let's generate Java EE 6 web.xml file.</p>
<p>&nbsp;</p>
<p>If you use Maven, your work is not yet done, because if you leave your project as it is now, you will later encounter an error that Java version in facet does not correspond to Java version which Maven uses for your project. That's why you need to add this plugin to pom.xml:</p>
<p>&nbsp;</p>
<pre class="prettyprint">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.1&lt;/version&gt;
      &lt;configuration&gt;
        &lt;source&gt;1.6&lt;/source&gt;
        &lt;target&gt;1.6&lt;/target&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</pre>
<p>&nbsp;</p>
<p>And finally ALT + F5 to update Maven project and you're done.</p>
<p>&nbsp;</p>
<p>Java EE 7 web.xml:</p>
<pre class="prettyprint">&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;version="3.1"&gt;
&lt;/web-app&gt;</pre>
<p>&nbsp;</p>
<p>Java EE 6 web.xml:</p>
<pre class="prettyprint">&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
 &nbsp; &nbsp; &nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 &nbsp; &nbsp; &nbsp;xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
 &nbsp; &nbsp; &nbsp;http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
 &nbsp; &nbsp; &nbsp;version="3.0"&gt;
&lt;/web-app&gt;</pre>
<p>&nbsp;</p>
<p>Java EE 5 web.xml:</p>
<pre class="prettyprint">&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
 &nbsp; &nbsp; &nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 &nbsp; &nbsp; &nbsp;xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
 &nbsp; &nbsp; &nbsp;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
 &nbsp; &nbsp; &nbsp;version="2.5"&gt;
&lt;/web-app&gt;</pre>
]]>
</description>
<name>
<![CDATA[
How to generate web.xml in Eclipse
]]>
</name>
<youtubeid>6vp6-m69M7k</youtubeid>
<shortdesc>
<![CDATA[
How to easily generate deployment descriptor (web.xml) in Eclipse for various Java EE versions? With examples for Java EE 7, Java EE 6 and Java EE 5
]]>
</shortdesc>
<shortname>how-to-generate-web-xml-in-eclipse</shortname>
<publishdate>2014-03-23T08:01:34</publishdate>
<length>220</length>
<keywords>java
eclipse
howto
tutorial
web.xml
java ee 7
java ee 6
java ee 5
deployment descriptor</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>In this tutorial I will create a Java Blog Aggregator, which will run on this domain: http://www.topjavablogs.com using Heroku.</p>
<p>&nbsp;</p>
<p>The source code is on GitHub: https://github.com/jirkapinkas/java-blog-aggregator, the licence is open source and I will start this project completely from scratch.</p>
<p>&nbsp;</p>
<p>I will use Spring, Hibernate, Twitter Bootstrap, JQuery, Apache Tiles and JSP. From Spring I will use more than just basic framework, but also Spring Data JPA and Spring Security.</p>
<p>&nbsp;</p>
<p>Now more about the application itself:</p>
<p>&nbsp;</p>
<p>There are lots of blogs on the web with RSS feeds, which contain the latest news. This web application will regularly download them and store them inside the database. On the homepage will be latest news. Anybody can register. The application will use JQuery for client side validation. After registration the user can sign in and go to his account, where he can add some new blog. The news from the blog will be instantly visible on the home page.</p>
<p>&nbsp;</p>
<p>The administrator can see all users, their blogs and remove them.&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 0: Java Blog Aggregator overview
]]>
</name>
<youtubeid>mH2jx2RCu7o</youtubeid>
<shortdesc>
<![CDATA[
In this tutorial I will create a Java Blog Aggregator
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-0-java-blog-aggregator-overview</shortname>
<publishdate>2014-04-01T13:15:41</publishdate>
<length>151</length>
<keywords>java
eclipse
howto
tutorial
spring
blog
aggregator
java blog aggregator
web application</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Spring Web MVC basics explained, using Dispatcher Servlet and web.xml, how to scan Spring annotations and basic example of @Controller and @RequestMapping annotations.</p>
<p>&nbsp;</p>
<p>Download result:&nbsp;http://www.javavids.com/spring-web-app-tutorial/java-blog-aggregator-step-3.zip</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 3: Spring Web MVC hello world
]]>
</name>
<youtubeid>U7i1gRv5nZY</youtubeid>
<shortdesc>
<![CDATA[
Spring Web MVC basics explained, using Dispatcher Servlet and web.xml, how to scan Spring annotations and basic example of @Controller and @RequestMapping annotations.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-3-spring-web-mvc-hello-world</shortname>
<publishdate>2014-04-23T16:08:06</publishdate>
<length>540</length>
<keywords>front controller
training
howto
aggregator
eclipse
Hello World Program
java blog aggregator
tutorial
java
Model--view--controller
javavids
web application
requestmapping
mvc
basics
Spring Framework
controller
dispatcher servlet</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create a Hello World Maven Java EE 6 web application in Eclipse and how to use Jetty plugin (Jetty is a web container like Apache Tomcat).</p>
<p>&nbsp;</p>
<p>Download result:&nbsp;http://www.javavids.com/spring-web-app-tutorial/java-blog-aggregator-step-1.zip</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 1: Hello World Maven Java EE 6
]]>
</name>
<youtubeid>dEnVDoi9iok</youtubeid>
<shortdesc>
<![CDATA[
How to create a Hello World Maven Java EE 6 web application in Eclipse and how to use Jetty plugin (Jetty is a web container like Apache Tomcat).
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-1-hello-world-maven-java-ee-6</shortname>
<publishdate>2014-04-23T16:05:03</publishdate>
<length>314</length>
<keywords>blog
Apache Maven
training
Apache Tomcat (Software)
aggregator
eclipse
web application
java
GitHub (Website)
basics
spring
Jetty
howto
java blog aggregator
tutorial
javavids</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Apache Tiles &amp; Framework Spring integration, Apache Tiles basics, how to use template, tiles definitions and attributes.</p>
<p>&nbsp;</p>
<p>Download result:&nbsp;http://www.javavids.com/spring-web-app-tutorial/java-blog-aggregator-step-4.zip</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 4: Apache Tiles
]]>
</name>
<youtubeid>V9244FjHT2M</youtubeid>
<shortdesc>
<![CDATA[
Apache Tiles & Framework Spring integration, Apache Tiles basics, how to use template, tiles definitions and attributes.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-4-apache-tiles</shortname>
<publishdate>2014-04-23T16:10:23</publishdate>
<length>670</length>
<keywords>java
training
howto
aggregator
javavids
web application
basics
spring
Spring Framework
java blog aggregator
apache tiles
tutorial
heroku
eclipse</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create a GitHub repository and share your project to GitHub in Eclipse. How to commit and push changes to GitHub repository.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 2: Setting GitHub & Eclipse
]]>
</name>
<youtubeid>QezpSLRliyY</youtubeid>
<shortdesc>
<![CDATA[
How to create a GitHub repository and share your project to GitHub in Eclipse. How to commit and push changes to GitHub repository.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-2-setting-github-eclipse</shortname>
<publishdate>2014-04-23T16:06:24</publishdate>
<length>98</length>
<keywords>java
training
git
howto
aggregator
javavids
web application
java blog aggregator
repository
spring
push
commit
basics
github
tutorial
eclipse</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>If you run your web application using embedded Java EE server and try to run it in debug mode, once you hit some breakpoint, you will encounter this error: "Source not found". Just simply press "Edit Source Lookup Path ...", add your project and restart your web application. And now it works.</p>
]]>
</description>
<name>
<![CDATA[
How to solve Source not found error during debug in Eclipse
]]>
</name>
<youtubeid>IGIKPY6q1Qw</youtubeid>
<shortdesc>
<![CDATA[
If you run your web application using embedded Java EE server in Maven (like Tomcat or Jetty) and try to run it in debug mode, once you hit some breakpoint, you will encounter this error: "Source not found".
]]>
</shortdesc>
<shortname>how-to-solve-source-not-found-error-during-debug-in-eclipse</shortname>
<publishdate>2014-06-22T20:35:49</publishdate>
<length>97</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
source not found
error
jetty
maven</keywords>
</item>
<item>
<groupshortname>apache-maven</groupshortname>
<description>
<![CDATA[
<p>By default if you run goal package, a JAR file will be created. But without dependencies and inside META-INF/MANIFEST.MF won't be specified Main-Class.</p>
<p>&nbsp;</p>
<p>How to create a runnable Java application? Using Maven assembly plugin.</p>
<p>Add inside pom.xml file:</p>
<pre class="prettyprint">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;archive&gt;
          &lt;manifest&gt;
            &lt;mainClass&gt;com.javavids.main.Main&lt;/mainClass&gt;
          &lt;/manifest&gt;
        &lt;/archive&gt;
        &lt;descriptorRefs&gt;
          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
        &lt;/descriptorRefs&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</pre>
<p>and then run goal:</p>
<pre class="prettyprint"> clean package assembly:single </pre>
<p>and inside target directory will be created a JAR file with packaged dependencies</p>
]]>
</description>
<name>
<![CDATA[
How to create runnable JAR file with Maven
]]>
</name>
<youtubeid>0wFtzXbqhnY</youtubeid>
<shortdesc>
<![CDATA[
How to create runnable JAR file using Maven assembly plugin.
]]>
</shortdesc>
<shortname>how-to-create-runnable-jar-file-with-maven</shortname>
<publishdate>2013-08-05T09:07:54</publishdate>
<length>166</length>
<keywords>java
eclipse
howto
tutorial
maven
assembly
jar
runnable
package
main class
manifest.mf</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create Java entities with relationships (OneToMany, ManyToMany, ManyToOne). How to validate relationship using Eclipse JPA Diagram Editor.&nbsp;</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 9: JPA entities
]]>
</name>
<youtubeid>NveANoe_Zog</youtubeid>
<shortdesc>
<![CDATA[
How to create Java entities with relationships (OneToMany, ManyToMany, ManyToOne). How to validate relationship using Eclipse JPA Diagram Editor. 
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-9-jpa-entities</shortname>
<publishdate>2014-04-23T16:21:15</publishdate>
<length>742</length>
<keywords>training
Java Persistence API (Software)
git
java
aggregator
eclipse
relationship
jpa diagram editor
relation
java blog aggregator
spring
entity
tutorial
howto
hibernate
many to many
jpa
many to one
basics
Spring Framework
github
javavids
one to many
heroku
web application
framework spring</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create and use Spring Data JPA repositories. Also how to create a test database.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 10: Spring Data JPA basics
]]>
</name>
<youtubeid>eBMDgbtlNoE</youtubeid>
<shortdesc>
<![CDATA[
How to create and use Spring Data JPA repositories. Also how to create a test database.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-10-spring-data-jpa-basics</shortname>
<publishdate>2014-04-23T16:23:08</publishdate>
<length>673</length>
<keywords>training
Java Persistence API (Software)
howto
aggregator
eclipse
java blog aggregator
spring
beginner
tutorial
spring data jpa
java
hibernate
javavids
web application
basics
spring framework
jpa</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Spring Web MVC (Model View Controller) with Apache Tiles. How to use &nbsp;JSTL (Java Standard Tag Library) - c:forEach. Styling table using Twitter Bootstrap.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 11: MVC (Model View Controller)
]]>
</name>
<youtubeid>F8Arpb4JX4E</youtubeid>
<shortdesc>
<![CDATA[
How to use Spring Web MVC (Model View Controller) with Apache Tiles. How to use  JSTL (Java Standard Tag Library) - c:forEach. Styling table using Twitter Bootstrap.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-11-mvc-model-view-controller</shortname>
<publishdate>2014-04-23T16:24:35</publishdate>
<length>624</length>
<keywords>foreach
training
github
git
java
aggregator
eclipse
java blog aggregator
apache tiles
twitter bootstrap
jstl
taglib
tutorial
howto
Model--view--controller
javavids
web application
maven
mvc
basics
spring
css
java standard tag library
heroku
framework spring</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Spring Transactional annotation to load entities in service layer instead of using Open Entity Manager In View Filter.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 16: Hibernate Transaction
]]>
</name>
<youtubeid>Xvn_oJWAtyc</youtubeid>
<shortdesc>
<![CDATA[
How to use Spring Transactional annotation to load entities in service layer instead of using Open Entity Manager In View Filter.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-16-hibernate-transaction</shortname>
<publishdate>2014-04-23T16:39:19</publishdate>
<length>304</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
java blog aggregator
aggregator
web application
spring
framework spring
transactional
transaction
entity
open entity manager in view filter
heroku
hibernate
jpa</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Spring Data JPA for paging, sorting and top-n processing? This will generate SQL "SELECT ... ORDER BY ... LIMIT ...".</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 17: Spring Data JPA Paging and sorting
]]>
</name>
<youtubeid>7_5UEYEAMzE</youtubeid>
<shortdesc>
<![CDATA[
How to use Spring Data JPA for paging, sorting and top-n processing? This will generate SQL "SELECT ... ORDER BY ... LIMIT ...".
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-17-spring-data-jpa-paging-and-sorting</shortname>
<publishdate>2014-04-23T16:40:06</publishdate>
<length>149</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
java blog aggregator
java aggregator
hibernate
jpa
spring data jpa
spring
framework spring
paging
sort
top-n processing
order by
sql limit
sql
web application
pagerequest
pageable</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to integrate Hibernate with Spring and Spring Data JPA using LocalContainerEntityManagerFactoryBean? I will use test HSQL test database (later will be used PostgreSQL).</p>
<p>In configuration I won't use &nbsp;persistence.xml. The Hibernate will print SQL commands to standard output (using hibernate.show_sql) and the database will be created automatically from entities (using hibernate.hbm2ddl.auto). Plus hello world entity.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 8: persistence
]]>
</name>
<youtubeid>lGyOwdemLqc</youtubeid>
<shortdesc>
<![CDATA[
How to integrate Hibernate with Spring and Spring Data JPA using LocalContainerEntityManagerFactoryBean? I will use test HSQL test database (later will be used PostgreSQL).
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-8-persistence</shortname>
<publishdate>2014-04-23T16:18:24</publishdate>
<length>721</length>
<keywords>training
git
java
aggregator
eclipse
entity manager
entity
spring
hbm2ddl
java blog aggregator
persistence.xml
tutorial
spring data jpa
show sql
howto
hibernate
persistence
jpa
web application
entity manager factory
basics
Spring Framework
github
javavids
heroku
hello world</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to bind JSP form to Java object using ModelAttribute annotation. The form will have responsive layout using Twitter Bootstrap. Receiving HTTP POST in Spring Web MVC.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 18: JSP Form binding using Model Attribute
]]>
</name>
<youtubeid>F9o-0N7tMg8</youtubeid>
<shortdesc>
<![CDATA[
How to bind JSP form to Java object using ModelAttribute annotation. The form will have responsive layout using Twitter Bootstrap. Receiving HTTP POST in Spring Web MVC.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-18-jsp-form-binding-using-model-attribute</shortname>
<publishdate>2014-04-23T16:42:10</publishdate>
<length>717</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
spring
framework spring
spring web mvc
http
http post
twitter bootstrap
model attribute
annotation
jsp
http form
Responsive Web Design (Industry)
form binding</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Spring Security basics, how to secure Spring web application URLs using Spring Security Filter. Spring Security XML configuration file.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 19: Spring Security basics
]]>
</name>
<youtubeid>1dXAz9cGbxM</youtubeid>
<shortdesc>
<![CDATA[
Spring Security basics, how to secure Spring web application URLs using Spring Security Filter. Spring Security XML configuration file.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-19-spring-security-basics</shortname>
<publishdate>2014-04-23T16:44:34</publishdate>
<length>333</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
java blog aggregator
aggregator
spring security
security
xml
Spring Framework
url
spring security filter</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to change default login page in Spring security. Creating JSP file with Twitter Bootstrap.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 20: Spring Security login page
]]>
</name>
<youtubeid>qokxfOqE-SM</youtubeid>
<shortdesc>
<![CDATA[
How to change default login page in Spring security. Creating JSP file with Twitter Bootstrap.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-20-spring-security-login-page</shortname>
<publishdate>2014-04-23T16:45:36</publishdate>
<length>323</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Twitter Bootstrap (Software)
spring framework
web application
jsp
login
spring security
controller
java blog aggregator
aggregator</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to set custom logout URL in a Spring Security application.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 21: Spring Security Logout
]]>
</name>
<youtubeid>HJvBJFzrXoQ</youtubeid>
<shortdesc>
<![CDATA[
How to set custom logout URL in a Spring Security application.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-21-spring-security-logout</shortname>
<publishdate>2014-04-23T16:46:30</publishdate>
<length>88</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
spring framework
spring security
logout
java blog aggregator
custom url
aggregator</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Expression-Based Access Control in Spring Security. Example of hasRole expression.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 22: Spring Security Expressions
]]>
</name>
<youtubeid>W-bDLFEyEig</youtubeid>
<shortdesc>
<![CDATA[
How to use Expression-Based Access Control in Spring Security. Example of hasRole expression.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-22-spring-security-expressions</shortname>
<publishdate>2014-04-23T16:47:17</publishdate>
<length>89</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
has role
expression
spring security
spring framework
web application
java blog aggregator
aggregator</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Spring Security JSP taglib and tag security:authorize with isAuthenticated and hasRole expressions.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 23: Spring Security and JSP
]]>
</name>
<youtubeid>2PpvE1Ic9-Q</youtubeid>
<shortdesc>
<![CDATA[
How to use Spring Security JSP taglib and tag security:authorize with isAuthenticated and hasRole expressions.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-23-spring-security-and-jsp</shortname>
<publishdate>2014-04-23T16:48:12</publishdate>
<length>192</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
spring security
framework spring
security
authorize
jsp
jsp taglib
web application
java blog aggregator
aggregator
is authenticated
has role</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to resolve LazyInitializationException using OpenEntityManagerInViewFilter / OpenSessionInViewFilter?</p>
<p>You get Lazy Initialization Exception when you access LAZY relationship outside transaction in Hibernate (JPA) - also known as Hibernate Lazy Loading.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 15: Hibernate Lazy Initialization Exception
]]>
</name>
<youtubeid>ZEbWcLKnMXo</youtubeid>
<shortdesc>
<![CDATA[
How to resolve LazyInitializationException using OpenEntityManagerInViewFilter / OpenSessionInViewFilter.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-15-hibernate-lazy-initialization-exception</shortname>
<publishdate>2014-04-23T16:37:23</publishdate>
<length>383</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
java blog aggregator
aggregator
lazy initialization exception
relationship
hibernate
jpa
spring
framework spring
web application
open entity manager in view filter
lazy
eager
heroku
open session in view filter</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Using Twitter Bootstrap tabs with JQuery.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 30: Twitter Bootstrap tabs
]]>
</name>
<youtubeid>r193BJ3m9bg</youtubeid>
<shortdesc>
<![CDATA[
Using Twitter Bootstrap tabs with JQuery.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-30-twitter-bootstrap-tabs</shortname>
<publishdate>2014-04-23T18:31:39</publishdate>
<length>271</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
tabs
Twitter Bootstrap (Software)
java blog aggregator
aggregator
JavaScript (Programming Language)
JQuery (Software)
framework spring
spring framework</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to read roles and users using JDBC User Service (from relational database - HSQL, PostgreSQL, MySQL, Oracle, ...)? Authorities by username query and users by username query.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 24: Spring Security and database
]]>
</name>
<youtubeid>Iy_4oR2fek0</youtubeid>
<shortdesc>
<![CDATA[
How to read roles and users using JDBC User Service. Authorities by username query and users by username query.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-24-spring-security-and-database</shortname>
<publishdate>2014-04-23T16:49:09</publishdate>
<length>203</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
database
relational database
authorities
query
jdbc
data source
user service
spring security
framework spring
web application
java blog aggregator
aggregator
role
user</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to encode password using BCrypt (best practice, contains salt and is best protection against brute-force attacks).</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 25: Spring Security BCrypt
]]>
</name>
<youtubeid>H-oBQRnE_n0</youtubeid>
<shortdesc>
<![CDATA[
How to encode password using BCrypt (best practice, contains salt and is best protection against brute-force attacks). Using BCryptPasswordEncoder.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-25-spring-security-bcrypt</shortname>
<publishdate>2014-04-23T18:24:42</publishdate>
<length>108</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
bcrypt
spring security
bcrypt password encoder
password
hash
salt
best practice
framework spring
java blog aggregator
aggregator
brute force attack</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>Complete registration form. Now we will be able to create a user with encrypted password (using bcrypt) and role ROLE_USER, which will be able to login using Spring Security.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 26: registration form complete
]]>
</name>
<youtubeid>DRADZUzdFYQ</youtubeid>
<shortdesc>
<![CDATA[
Complete registration form. Now we will be able to create a user with encrypted password (using bcrypt) and role ROLE_USER, which will be able to login using Spring Security.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-26-registration-form-complete</shortname>
<publishdate>2014-04-23T18:26:09</publishdate>
<length>284</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
java blog aggregator
aggregator
framework spring
Spring Framework
form
spring web mvc
spring security</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to implement Post/Redirect/Get design pattern using Spring Web MVC. Best practice for form submit.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 27: Spring Web MVC redirect
]]>
</name>
<youtubeid>_b927brFMyE</youtubeid>
<shortdesc>
<![CDATA[
How to implement Post/Redirect/Get design pattern using Spring Web MVC. Best practice for form submit.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-27-spring-web-mvc-redirect</shortname>
<publishdate>2014-04-23T18:27:21</publishdate>
<length>161</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
Model--view--controller
spring web mvc
framework spring
Spring Framework
java blog aggregator
aggregator
post redirect get
design pattern
http
form
web application</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to create a page with user account. How to retrieve currently logged in user name (using Principal object) in Spring Web MVC. Security is done using Spring security.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 28: User account
]]>
</name>
<youtubeid>SeiEDV4ac64</youtubeid>
<shortdesc>
<![CDATA[
How to create a page with user account. How to retrieve currently logged in user name (using Principal object) in Spring Web MVC. Security is done using Spring security.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-28-user-account</shortname>
<publishdate>2014-04-23T18:28:35</publishdate>
<length>269</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
framework spring
java blog aggregator
aggregator
principal
user account
user detail
spring web mvc
logged in user name
user name
user login
spring security
user
Spring Framework</keywords>
</item>
<item>
<groupshortname>spring-web-application-tutorial-java-blogs-aggregator</groupshortname>
<description>
<![CDATA[
<p>How to use Twitter Bootstrap modal dialog? Example of a modal dialog with form, which will create a new blog.</p>
]]>
</description>
<name>
<![CDATA[
Spring web app tutorial 29: Twitter Bootstrap modal
]]>
</name>
<youtubeid>St4-x9Cz04A</youtubeid>
<shortdesc>
<![CDATA[
How to use Twitter Bootstrap modal dialog? Example of a modal dialog with form, which will create a new blog.
]]>
</shortdesc>
<shortname>spring-web-app-tutorial-29-twitter-bootstrap-modal</shortname>
<publishdate>2014-04-23T18:30:44</publishdate>
<length>502</length>
<keywords>java
eclipse
howto
tutorial
javavids
basics
web application
java blog aggregator
spring framework
Twitter Bootstrap (Software)
modal
framework spring</keywords>
</item>
</migrace>
